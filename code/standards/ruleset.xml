<?xml version="1.0" encoding="UTF-8"?>

<!--
   - Code quality rule set for use with the PCGen Java code.
   - See https://pmd.github.io/latest/pmd_rules_java.html
   - for descriptions of the rules applied. 
 -->
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="PCGen Code Rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>
        PMD rules customised for PCGen's code.
    </description>
    <rule ref="category/java/bestpractices.xml">
        <!-- there is nothing wrong with such abstract classes without abstract methods-->
        <exclude name="AbstractClassWithoutAbstractMethod"/>
        <exclude name="AccessorClassGeneration"/>
        <exclude name="AccessorMethodGeneration"/>
        <exclude name="ArrayIsStoredDirectly"/>
        <exclude name="AvoidReassigningParameters"/>
        <exclude name="AvoidStringBufferField"/>
        <exclude name="ForLoopCanBeForeach"/>
        <exclude name="GuardLogStatement"/>
        <exclude name="LooseCoupling"/>
        <exclude name="MethodReturnsInternalArray"/>
        <!-- its better to throw a NPE and add explicit checks. Nulls should be rare -->
        <exclude name="PositionLiteralsFirstInCaseInsensitiveComparisons"/>
        <!-- its better to throw a NPE and add explicit checks. Nulls should be rare -->
        <exclude name="PositionLiteralsFirstInComparisons"/>
        <exclude name="SwitchStmtsShouldHaveDefault"/>
        <exclude name="SystemPrintln"/>
        <exclude name="UnusedFormalParameter"/>
        <exclude name="UnusedPrivateField"/>
        <exclude name="UnusedPrivateMethod"/>
        <!-- it's a tradeoff: it creates a warning to use it, which then has to be addressed -->
        <exclude name="UseVarargs"/>
        <exclude name="JUnitAssertionsShouldIncludeMessage"/>
        <!-- no networking code, but has false positives -->
        <exclude name="AvoidUsingHardCodedIP"/>
        <exclude name="UseAssertTrueInsteadOfAssertEquals"/>
        <exclude name="UseAssertEqualsInsteadOfAssertTrue"/>
        <exclude name="UseAssertSameInsteadOfAssertTrue"/>
        <exclude name="ForLoopVariableCount"/>
        <exclude name="AvoidReassigningLoopVariables"/>
    </rule>
    <rule ref="category/java/codestyle.xml">
        <!-- deprecated -->
        <exclude name="AbstractNaming"/>
        <!-- flags classes that rely on default ctor -->
        <exclude name="AtLeastOneConstructor"/>
        <!-- we don't use them, but don't disallow them -->
        <exclude name="AvoidFinalLocalVariable"/>
        <!-- deprecated -->
        <exclude name="AvoidPrefixingMethodParameters"/>
        <exclude name="AvoidProtectedFieldInFinalClass"/>
        <exclude name="AvoidProtectedMethodInFinalClassNotExtending"/>
        <!-- we have enough exceptions as to make this noise -->
        <exclude name="BooleanGetMethodName"/>
        <exclude name="CallSuperInConstructor"/>
        <exclude name="ClassNamingConventions"/>
        <!-- adding comment to address Java's poor choice is noisy and not checkable -->
        <exclude name="CommentDefaultAccessModifier"/>
        <exclude name="ConfusingTernary"/>
        <!-- we want minimal access. -->
        <exclude name="DefaultPackage"/>
        <!-- default "do nothing" behavior is reasonable -->
        <exclude name="EmptyMethodInAbstractClassShouldBeAbstract"/>
        <exclude name="FieldDeclarationsShouldBeAtStartOfClass"/>
        <exclude name="ForLoopShouldBeWhileLoop"/>
        <!-- we use longer names (e.g. 'IDT') -->
        <exclude name="GenericsNaming"/>
        <!-- Generates "noise pollution" around the usage of final, our semantic usage is as a trigger it is necessary, not when it's possible -->
        <exclude name="LocalVariableCouldBeFinal"/>
        <exclude name="LongVariable"/>
        <!-- generates "noise pollution" around the usage of final, our semantic usage is as a trigger it is necessary, not when it's possible -->
        <exclude name="MethodArgumentCouldBeFinal"/>
        <exclude name="MethodNamingConventions"/>
        <!-- bad rule leading to confusing code -->
        <exclude name="OnlyOneReturn"/>
        <exclude name="PrematureDeclaration"/>
        <exclude name="ShortClassName"/>
        <exclude name="ShortVariable"/>
        <!-- Deprecated -->
        <exclude name="SuspiciousConstantFieldName"/>
        <exclude name="UnnecessaryConstructor"/>
        <exclude name="UnnecessaryFullyQualifiedName"/>
        <exclude name="UnnecessaryLocalBeforeReturn"/>
        <!-- This is excluded because we use "public" in Interfaces almost universally (as a semantic hint as to its real behavior) -->
        <exclude name="UnnecessaryModifier"/>
        <exclude name="UnnecessaryReturn"/>
        <!-- Understores not required for readability -->
        <exclude name="UseUnderscoresInNumericLiterals" />
        <!-- This is excluded because we use "useless" parenthesis for readability -->
        <exclude name="UselessParentheses"/>
        <!-- not our style -->
        <exclude name="UselessQualifiedThis"/>
        <!-- Deprecated -->
        <exclude name="VariableNamingConventions"/>
        <exclude name="FieldNamingConventions"/>
        <exclude name="LinguisticNaming" />
        <exclude name="LocalVariableNamingConventions" />
        <exclude name="FormalParameterNamingConventions"/>
        <exclude name="IdenticalCatchBranches"/>
        <exclude name="TooManyStaticImports" />
        <exclude name="ShortMethodName"/>
    </rule>
    <rule ref="category/java/design.xml">
        <exclude name="AvoidCatchingGenericException"/>
        <exclude name="AvoidDeeplyNestedIfStmts"/>
        <exclude name="AvoidThrowingNullPointerException"/>
        <exclude name="AvoidThrowingRawExceptionTypes"/>
        <exclude name="CollapsibleIfStatements"/>
        <exclude name="CouplingBetweenObjects"/>
        <!-- useless metric -->
        <exclude name="CyclomaticComplexity"/>
        <exclude name="DataClass"/>
        <exclude name="ExcessiveClassLength"/>
        <exclude name="ExcessiveMethodLength"/>
        <exclude name="ExcessiveImports"/>
        <exclude name="ExcessiveParameterList"/>
        <exclude name="ExcessivePublicCount"/>
        <exclude name="GodClass"/>
        <exclude name="FinalFieldCouldBeStatic"/>
        <exclude name="ImmutableField"/>
        <exclude name="LawOfDemeter"/>
        <exclude name="LogicInversion"/>
        <exclude name="LoosePackageCoupling"/>
        <!-- Deprecated -->
        <exclude name="NcssCount"/>
        <!-- Deprecated -->
        <exclude name="NPathComplexity"/>
        <exclude name="SignatureDeclareThrowsException"/>
        <exclude name="SimplifyBooleanReturns"/>
        <exclude name="SimplifyBooleanExpressions"/>
        <exclude name="SimplifyConditional"/>
        <exclude name="SingularField"/>
        <exclude name="SwitchDensity"/>
        <exclude name="TooManyFields"/>
        <exclude name="TooManyMethods"/>
        <exclude name="UseObjectForClearerAPI"/>
        <exclude name="UselessOverridingMethod"/>
    </rule>
    <rule ref="category/java/errorprone.xml">
        <exclude name="AssignmentInOperand"/>
        <exclude name="AssignmentToNonFinalStatic"/>
        <exclude name="AvoidBranchingStatementAsLastInLoop"/>
        <exclude name="AvoidCatchingNPE"/>
        <exclude name="AvoidCatchingThrowable"/>
        <exclude name="AvoidDuplicateLiterals"/>
        <exclude name="AvoidFieldNameMatchingMethodName"/>
        <exclude name="AvoidFieldNameMatchingTypeName"/>
        <exclude name="AvoidLiteralsInIfCondition"/>
        <!-- we don't use seralization -->
        <exclude name="BeanMembersShouldSerialize"/>
        <exclude name="CloneThrowsCloneNotSupportedException"/>
        <exclude name="CompareObjectsWithEquals"/>
        <exclude name="ConstructorCallsOverridableMethod"/>
        <exclude name="DataflowAnomalyAnalysis"/>
        <exclude name="DoNotCallSystemExit"/>
        <exclude name="EmptyCatchBlock"/>
        <exclude name="EmptyIfStmt"/>
        <exclude name="EmptyStatementNotInLoop"/>
        <exclude name="ImportFromSamePackage"/>
        <exclude name="InstantiationToGetClass"/>
        <exclude name="LoggerIsNotStaticFinal"/>
        <exclude name="MissingBreakInSwitch"/>
        <!-- we don't use seralization -->
        <exclude name="MissingSerialVersionUID"/>
        <exclude name="NullAssignment"/>
        <exclude name="OverrideBothEqualsAndHashcode"/>
        <exclude name="ProperCloneImplementation"/>
        <exclude name="ReturnEmptyArrayRatherThanNull"/>
        <exclude name="SingleMethodSingleton"/>
        <exclude name="UseEqualsToCompareStrings"/>
        <exclude name="UseLocaleWithCaseConversions"/>
        <exclude name="TestClassWithoutTestCases"/>
    </rule>
    <rule ref="category/java/multithreading.xml">
        <exclude name="AvoidSynchronizedAtMethodLevel"/>
        <exclude name="DoNotUseThreads"/>
        <exclude name="NonThreadSafeSingleton"/>
        <exclude name="UseConcurrentHashMap"/>
        <exclude name="UnsynchronizedStaticFormatter"/>
    </rule>
    <rule ref="category/java/performance.xml">
        <exclude name="AppendCharacterWithChar"/>
        <exclude name="AvoidFileStream"/>
        <exclude name="AvoidInstantiatingObjectsInLoops"/>
        <exclude name="StringInstantiation"/>
        <!-- This is excluded because it's a micro-optimization (JIT compilation would eliminate the performance penalty) and enforcing it encourages writing less readable code -->
        <exclude name="ConsecutiveAppendsShouldReuse"/>
        <exclude name="ConsecutiveLiteralAppends"/>
        <exclude name="InefficientEmptyStringCheck"/>
        <exclude name="InefficientStringBuffering"/>
        <exclude name="InsufficientStringBufferDeclaration"/>
        <!-- Excluded due to minimal perf gain and loss of code
             clarity (added length check)-->
        <exclude name="SimplifyStartsWith"/>
        <exclude name="RedundantFieldInitializer"/>
        <exclude name="StringToString"/>
        <exclude name="TooFewBranchesForASwitchStatement"/>
        <exclude name="UnnecessaryWrapperObjectCreation"/>
        <exclude name="UseIndexOfChar"/>
        <exclude name="UseStringBufferForStringAppends"/>
        <exclude name="UselessStringValueOf"/>
    </rule>
</ruleset>
