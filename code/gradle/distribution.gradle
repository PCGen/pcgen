import java.time.LocalDateTime

/*
 * PCGen distributable generation tasks. This file specifies the
 * archives included in the PCGen autobuild and PCGen releases. It
 * is called from the main build.gradle file.
 *
 * Usage: gradle builddist
 */
ext {
    zipRootFolder = "pcgen"

    buildTimestamp = LocalDateTime.now(Clock.systemUTC())

    autobuildSpec = copySpec{}

    if (System.env.BUILD_NUMBER) {
        autobuildSpec = copySpec {
            from('code/gradle/autobuild.template')
            rename('.+','autobuild.properties')
            expand(buildnumber: System.env.BUILD_NUMBER, version: version, timestamp: buildTimestamp)
        }
    }

    dataDistsImage = copySpec {
        from('.') {
            include 'data/**'
            include 'outputsheets/**'
            include 'system/**'
            include 'preview/**'
            include 'vendordata/**'
            include 'homebrewdata/**'
            exclude 'data/zen_test'
        }
    }

    docsDistsImage = copySpec {
        from('.') {
            include 'docs/**'
        }
    }
    
    programDistsImage = copySpec {
        from("$buildDir/launch4j") {
            include 'pcgen.exe'
        }
    }

    programScriptImage = copySpec {
        from('.') {
            include 'pcgen_low_mem.bat'
            include 'plugins/**'
            include 'logging.properties'
        }
        from('code') {
            include 'LICENSE'

            eachFile{ file ->
                if(file.getName().endsWith(".sh")) {
                    file.setMode(0755)
                }
            }
        }
    }

    libsDistsImage = copySpec {
        from("$buildDir/libs") {
            into 'libs'
            exclude 'pcgen-*.jar'
        }
    }

    charactersImage = copySpec {
        from('.') {
            include 'characters/*.pcg'
        }
    }

    jreImage = copySpec {
        from('.') {
            include 'jre/windows/**'
        }
    }
}

applicationDistribution.with(dataDistsImage)
applicationDistribution.with(docsDistsImage)
applicationDistribution.with(autobuildSpec)
applicationDistribution.with(charactersImage)
applicationDistribution.with(programScriptImage)
applicationDistribution.with(programDistsImage)

application{
    // Output the startScripts (.bat and .sh) in main distribute folder rather than .bin
    executableDir = ""
    applicationDefaultJvmArgs = ["-Dsun.java2d.d3d=false"]
}

run {
    // Required to fixed incorrectly added "--module-path" and adds correct modules.
    doFirst {
        // -ea enables assertions
        jvmArgs = ["-ea",
                   "--enable-preview",
                   "--module-path",
                   "${projectDir}/mods/lib/",
                   "--add-modules", "javafx.controls,javafx.web,javafx.swing,javafx.fxml",
        ]

    }
}
tasks.run.dependsOn(assemble)
tasks.run.dependsOn(downloadJavaFXModules)

installDist.doLast{
    delete {
        delete fileTree("${buildDir}/install/pcgen/lib") {
            include 'javafx-*'
        }
    }
}

[distZip, distTar, installDist]*.dependsOn createExe

task testZip(type: Zip, dependsOn: ['converterJar', 'copyToLibs', 'copyToOutput']) {
    classifier = 'test'
    into(zipRootFolder) {
        with dataDistsImage
        with docsDistsImage
        with programDistsImage
        with libsDistsImage
        with autobuildSpec
        with charactersImage
    }
}

task dataZip(type: Zip) {
    classifier = 'data'
    into(zipRootFolder) {
        with dataDistsImage
        with autobuildSpec
    }
}

task docsZip(type: Zip) {
    classifier = 'docs'
    into(zipRootFolder) {
        with docsDistsImage
        with autobuildSpec
    }
}

task programZip(type: Zip, dependsOn: 'converterJar') {
    classifier = 'program'
    into(zipRootFolder) {
        with programDistsImage
        with programScriptImage
        with autobuildSpec
    }
}

task libsZip(type: Zip, dependsOn: 'copyToLibs') {
    classifier = 'libs'
    into(zipRootFolder) {
        with libsDistsImage
        with autobuildSpec
    }
}

task buildDist(dependsOn: ['dataZip', 'docsZip', 'programZip', 'libsZip', 'runtimeZip']) {
    description = "Build the five zip files (docs, data, program, libs and full) which comprise the autobuild distribution."
}
