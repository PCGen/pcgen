import java.time.LocalDateTime

/*
 * PCGen distributable generation tasks. This file specifies the
 * archives included in the PCGen autobuild and PCGen releases. It
 * is called from the main build.gradle file.
 *
 * Usage: ./gradlew builddist
 */
ext {
    zipRootFolder = "pcgen"

    buildTimestamp = LocalDateTime.now(Clock.systemUTC())

    autobuildSpec = copySpec{}

    if (System.env.BUILD_NUMBER) {
        autobuildSpec = copySpec {
            from('code/gradle/autobuild.template')
            rename('.+','autobuild.properties')
            expand(buildnumber: System.env.BUILD_NUMBER, version: version, timestamp: buildTimestamp)
        }
    }

    dataDistsImage = copySpec {
        from('.') {
            include 'data/**'
            include 'outputsheets/**'
            include 'system/**'
            include 'preview/**'
            include 'vendordata/**'
            include 'homebrewdata/**'
            exclude 'data/zen_test'
        }
    }

    docsDistsImage = copySpec {
        from('.') {
            include 'docs/**'
        }
    }

    programDistsImage = copySpec {
        from(layout.buildDirectory.dir("launch4j")) {
            include 'pcgen.exe'
        }
    }

    programScriptImage = copySpec {
        from('.') {
            include 'pcgen_low_mem.bat'
            include 'plugins/**'
            include 'logging.properties'
        }
        from('code') {
            include 'LICENSE'

            eachFile { file ->
                if(file.getName().endsWith(".sh")) {
                    file.setMode(0755)
                }
            }
        }
    }

    libsDistsImage = copySpec {
        from(layout.buildDirectory.dir("libs")) {
            into 'libs'
            exclude 'pcgen-*.jar'
        }
    }

    charactersImage = copySpec {
        from('.') {
            include 'characters/*.pcg'
        }
    }

    jreImage = copySpec {
        from('.') {
            include 'jre/windows/**'
        }
    }
}

application {
    // Output the startScripts (.bat and .sh) in main distribute folder rather than .bin
    executableDir = ""
    applicationDefaultJvmArgs = ["-Dsun.java2d.d3d=false"]

    applicationDistribution.with(dataDistsImage)
    applicationDistribution.with(docsDistsImage)
    applicationDistribution.with(autobuildSpec)
    applicationDistribution.with(charactersImage)
    applicationDistribution.with(programScriptImage)
    applicationDistribution.with(programDistsImage)
}

tasks.named("run") {
    dependsOn assemble, extractJavaFXLocal
    // Required to fixed incorrectly added "--module-path" and adds correct modules.
    doFirst {
        jvmArgs = ["-ea",                       // -ea enables assertions
                   "--enable-preview",          // enable Java preview features
                   "--module-path", layout.projectDirectory.dir("mods/lib").asFile.absolutePath,
                   "--add-modules", "javafx.controls,javafx.web,javafx.swing,javafx.fxml,javafx.graphics"
        ]
    }
}

tasks.named("installDist") {
    doLast{
        delete {
            delete fileTree(layout.buildDirectory.dir("install/pcgen/lib")) {
                include 'javafx-*'
            }
        }
    }
}

tasks.register("testZip", Zip) {
    dependsOn converterJar, copyToLibs, copyToOutput
    archiveClassifier.set('test')
    into(zipRootFolder) {
        with dataDistsImage
        with docsDistsImage
        with programDistsImage
        with libsDistsImage
        with autobuildSpec
        with charactersImage
    }
}

tasks.register("dataZip", Zip) {
    dependsOn copyMasterSheets
    archiveClassifier.set('data')
    into(zipRootFolder) {
        with dataDistsImage
        with autobuildSpec
    }
}

tasks.register("docsZip", Zip) {
    archiveClassifier.set('docs')
    into(zipRootFolder) {
        with docsDistsImage
        with autobuildSpec
    }
}

tasks.register("programZip", Zip) {
    dependsOn converterJar
    archiveClassifier.set('program')
    into(zipRootFolder) {
        with programDistsImage
        with programScriptImage
        with autobuildSpec
    }
}

tasks.register("libsZip", Zip) {
    dependsOn copyToLibs
    archiveClassifier.set('libs')
    into(zipRootFolder) {
        with libsDistsImage
        with autobuildSpec
    }
}

tasks.register("buildDist") {
    dependsOn dataZip, docsZip, programZip, libsZip, runtimeZip
    description = "Build the five zip files (docs, data, program, libs and full) which comprise the autobuild distribution."
}
