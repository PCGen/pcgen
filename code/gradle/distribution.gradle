/*
 * PCGen distributable generation tasks. This file specifies the
 * archives included in the PCGen autobuild and PCGen releases. It
 * is called from the main build.gradle file.
 *
 * Usage: gradle builddist
 */

ext {
    zipRootFolder = "pcgen"

    buildTimestamp = new Date().format('yyyy-MM-dd HH:mm, Z')

    autobuildSpec = copySpec{}

    if (System.env.BUILD_NUMBER) {
        autobuildSpec = copySpec {
            from('code/gradle/autobuild.template')
            rename('.+','autobuild.properties')
            expand(buildnumber: System.env.BUILD_NUMBER, version: version, timestamp: buildTimestamp)
        }
    }

    dataDistsImage = copySpec {
        from('.') {
            include 'data/**'
            include 'outputsheets/**'
            include 'system/**'
            include 'preview/**'
		include 'vendordata/**'
		include 'homebrewdata/**'
		exclude 'data/zen_test'
        }
    }

    docsDistsImage = copySpec {
        from('.') {
            include 'docs/**'
        }
    }

// Redundancy this is root above ziproot
//    rootDistsImage = copySpec {
//        from('.') {
//            include 'pcgen.exe'
//		include 'pcgen.jar'
//		include 'pcgen-batch-convert.jar'
//		include 'pcgen.sh'
//       }
//    }

    programDistsImage = copySpec {
        from("$buildDir/libs") {
            include 'pcgen-*.jar'
            // Use a regular expression to map the file name
            rename "(.+)-$version(.+)", '$1$2'
        }
        from('.') {
            include 'pcgen_low_mem.bat'
            include 'plugins/**'
            include 'logging.properties'
        }
        from('code') {
            include 'LICENSE'
            include 'pcgen.sh'
        }
        from("$buildDir/launch4j") {
            include 'pcgen.exe'
        }
    }

    libsDistsImage = copySpec {
        from("$buildDir/libs") {
            into 'libs'
            exclude 'pcgen-*.jar'
        }
    }

    charactersImage = copySpec {
        from('.') {
            include 'characters/*.pcg'
        }
    }
}

task fullZip(type: Zip, dependsOn: ['converterJar', 'copyToLibs', 'copyToRoot']) {
    classifier = 'full'
    into(zipRootFolder) {
        with dataDistsImage
        with docsDistsImage
        with programDistsImage
        with libsDistsImage
        with autobuildSpec
        with charactersImage
    }
// Redundancy, not required with copyToRoot above
//    into("") {
//        with rootDistsImage
//    }
}

task dataZip(type: Zip) {
    classifier = 'data'
    into(zipRootFolder) {
        with dataDistsImage
        with autobuildSpec
    }
}

task docsZip(type: Zip) {
    classifier = 'docs'
    into(zipRootFolder) {
        with docsDistsImage
        with autobuildSpec
    }
}

task programZip(type: Zip, dependsOn: 'converterJar') {
    classifier = 'program'
    into(zipRootFolder) {
        with programDistsImage
        with autobuildSpec
    }
}

task libsZip(type: Zip, dependsOn: 'copyToLibs') {
    classifier = 'libs'
    into(zipRootFolder) {
        with libsDistsImage
        with autobuildSpec
    }
}

task buildDist(dependsOn: ['dataZip', 'docsZip', 'programZip', 'libsZip', \
'fullZip']) {
    description = "Build the five zip files (docs, data, program, libs and full) which comprise the autobuild distribution."
}
