/*
 * PCGen release tasks. This file specifies the way in which PCGen alpha, beta 
 * and production releases are made. 
 *
 * Usage: gradle prepareRelease
 * Usage: gradle buildNsis
 * Usage: gradle pcgenRelease
 *
 * Release script
 * 1. gradle prepareRelease slowtest
 *   a.	Update version – remove snapshot
 *   b.	Commit new version
 *   c.	Clean, Build and check
 *   d. Run slow tests
 * 2. Manual testing using product of  gradle fullZip or gradle buildNsis
 * 3. gradle pcgenRelease
 *   a.	Build
 *   b.	Assemble distributables
 *   c.	Tag
 *   d.	Update version – increment version and add snapshot
 *   e.	Commit new version
 * 
 * Author: James Dempsey 
 */

apply from: "code/gradle/releaseUtils.groovy"

ext {
   
   // Work out the path to the release notes for our current version.
   plainVerNum = version.replaceAll('-SNAPSHOT', '')
   shortVerNum = plainVerNum.replaceAll(/\./, '')
   releaseNotes = "${projectDir}/installers/release-notes/pcgen-release-notes-${shortVerNum}.html"

   nsisBaseFolder = "${buildDir}/nsis/Pcgen_${shortVerNum}_base"
   nsisOptionFolder = "${buildDir}/nsis/Pcgen_${shortVerNum}_opt"
   
   // specifications for what to copy to the NSIS base and optional folders
   baseLibs = copySpec {
        from("${buildDir}/libs") {
        	exclude 'pcgen-*.jar'
        	exclude 'kunststoff*.jar'
        	exclude 'skinlf*.jar'
        	exclude 'fop*.jar'
        	exclude 'xerces*.jar'
        	exclude 'batik*.jar'
        }
        into ('/libs')
    }
   
   pdfLibs = copySpec {
        from("${buildDir}/libs") {
        	include 'fop*.jar'
        	include 'xerces*.jar'
        	include 'batik*.jar'
        }
        into ('/plugin/pdf/libs')
    }
   
   skinLibs = copySpec {
        from("${buildDir}/libs") {
        	include 'kunststoff*.jar'
        	include 'skinlf*.jar'
        }
        into ('/plugin/skin/libs')
    }
    
    basePlugins = copySpec {
        from("${projectDir}/plugins") {
            include '*plugins/**'
            include 'Random Names/**'
            include 'DoomsdayBook.jar'
        }
        into ('/plugins')
    }
    
    gmgenPlugins = copySpec {
        from("${projectDir}/plugins") {
            exclude '*plugins/**'
            exclude 'Random Names/**'
            exclude 'DoomsdayBook.jar'
        }
        into ('/plugin/gmgen/plugins')
    }
    
    nonPdfOutput = copySpec {
        from("${projectDir}/outputsheets") {
            exclude '**/pdf/**'
        }
        into ('/outputsheets')
    }
    
    pdfOutput = copySpec {
        from("${projectDir}/outputsheets") {
            include '**/pdf/**'
        }
        into ('/plugin/pdf/outputsheets')
    }
    
    baseData = copySpec {
        from("${projectDir}/data") {
            include 'customsources/**'
            include 'homebrew/**'
            include 'publisher_logos/**'
        }
        into ('/data')
    }
    
    optionalData = copySpec {
        from("${projectDir}/data") {
            exclude 'customsources/**'
            exclude 'homebrew/**'
            exclude 'publisher_logos/**'
        }
        into ('/data')
    }
}

task layoutNsisBase(type: Copy, dependsOn: copyToRoot) {
	description="Assemble the required files for all PCGen installations"
	doFirst {
	  // Release notes are required!
	  assert file(releaseNotes).exists()
	} 

	into nsisBaseFolder
	from ("${projectDir}/installers/win-installer/Local") {
		into "../Local"
	}
	from ("${projectDir}/installers/win-installer/") {
		into "/docs/acknowledgments/"
		include "PCGenLicense.txt"
	}
	from ("${projectDir}") {
		include '*.jar'
		include 'pcgen.exe'
		include 'logging.properties'
		include 'system/**' // Later we want to split out the game modes to optional
		include 'docs/**'
		include 'preview/**'
		include 'characters/*.pcg'		
	}

	with baseLibs
	with basePlugins
	with nonPdfOutput
	with baseData
}

task layoutNsisOptional(type: Copy, dependsOn: copyToRoot) {
	description="Assemble the optional files for PCGen installations"
	into nsisOptionFolder

	with pdfLibs
	with skinLibs
	with gmgenPlugins
	with pdfOutput
	with optionalData
}


// Generate the publisher/data list for the Windows installer script
task genDataList << {
	new ByteArrayOutputStream().withStream { os ->
		def result = exec {
			workingDir = "${projectDir}/installers/win-installer"
		    executable = 'perl'
		    args = ['gendatalist.pl']
		    standardOutput = os
		}
		println os.toString()
	}
}

// Create the version specific config files for NSIS
task genProjectNsis << {
	new File("${projectDir}/installers/win-installer/project.nsh").write("""
; Projects file generated by release.gradle
!define PROJECT_BUILD_DIR "${buildDir}"
!define PROJECT_DIST_BIN_DIR "${buildDir}\\nsis"
!define PROJECT_DIST_DIR "${buildDir}"
!define PROJECT_FINAL_NAME "pcgen"
!define PROJECT_LICENSE_FILE "${projectDir}\\code\\LICENSE"
!define PROJECT_LICENSE_TEXT "This program is Licensed under The GNU Lesser General Public License, Version 2.1."
!define PROJECT_NAME "PCGen"
!define PROJECT_ORGANIZATION "SourceForge"
!define PROJECT_REG_KEY "SOFTWARE\\SourceForge\\PCGen\\${plainVerNum}"
!define PROJECT_REG_UNINSTALL_KEY "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PCGen ${plainVerNum}"
!define PROJECT_STARTMENU_FOLDER "\$SMPROGRAMS\\SourceForge\\PCGen ${plainVerNum}"
!define PROJECT_URL "http://pcgen.sourceforge.net/"
!define PROJECT_VERSION "${plainVerNum}"
""")

	new File("${projectDir}/installers/win-installer/includes/constants.nsh").write("""
; Constants file generated by release.gradle
!define SIMPVER "${shortVerNum}"
!define LONGVER "${plainVerNum}"
!define OutDir "${buildDir}/release"
!define SrcDir "${buildDir}/nsis"
""")

	mkdir "${buildDir}/release"
}

// Call NSIS to generate windows installer
task buildNsis(dependsOn: [layoutNsisBase, layoutNsisOptional, genDataList, genProjectNsis])  << {
	new ByteArrayOutputStream().withStream { os ->
		def result = exec {
			workingDir = "${buildDir}/nsis"
		    executable = 'C:/Program Files (x86)/NSIS/makensis.exe'
		    args = ["/V3", "${projectDir}/installers/win-installer/pcgen.nsis"]
		}
	}
}

task cleanNsis(type: Delete) {
  delete nsisBaseFolder, nsisOptionFolder, "${buildDir}/nsis/Local"
}


task sourcesJar(type: Jar, dependsOn: classes) {
	description = "build source jar file"
    classifier = 'sources'
    from sourceSets.main.allSource
}

task assembleArtifacts(type: Copy, dependsOn: ['build', 'fullZip', 'sourcesJar', 'buildNsis']) {
	description = "Create the release artifacts and get them into the release folder."
	into "${buildDir}/release"
	// buildNsis puts the exe into the release folder directly
	from ("${buildDir}/libs") {
		include 'pcgen*-sources.jar'
	}
	from ("${buildDir}/distributions") {
		include 'pcgen*-full.zip'
	}
}

// Produce SHA-256 checksums for each release artifact
task checksum(dependsOn: assembleArtifacts) << {
	File checksumsFile = new File("${buildDir}/release/SHA256-digests-${version}.txt")
	checksumsFile.delete()
    file("${buildDir}/release").listFiles().each {File file ->
        ant.checksum(file: file, property: "cs_$file.name", algorithm: "sha-256")
        def cs = ant.properties["cs_$file.name"]
        checksumsFile.append("SHA-256 digest for $file.name:\r\n$cs\r\n\r\n")
    }
} 

task prepareRelease (dependsOn: ['clean', 'build', 'genDataList']) {
	description="Prepare PCGen for release. This will update and commit the version, do a clean build including the unit tests and generate the data list for the installer."
}

task pcgenRelease (dependsOn: ['build', 'assembleArtifacts', 'checksum', 'tagRelease']) {
	description="Release a new version of PCGen. This will build PCGen, produce the release artifacts, tag the release and then update and commit the version ready for new dev work."
}

// Update the PCGen version to indicate a release, then commit the new version
task updateVersionRelease << {
	unSnapshotVersion()
	commitFile(new File("gradle.properties"), "Update version for release ${project.version}")
}

// Update the PCGen version for development of the next release, then commit the new version
task updateVersionToNext << {
	updateVersion()
	commitFile(new File("gradle.properties"), "Update version for dev work ${project.version}")
}

// Tag the current PCGen trunk
task tagRelease << {
	//def tagName = "release-${project.version}"
	//tagRepository("Trunk/pcgen", tagName, "Tag release ${project.version}")
}
