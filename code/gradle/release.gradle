/*
 * PCGen release tasks. This file specifies the way in which PCGen alpha, beta
 * and production releases are made.
 *
 * Usage: gradle prepareRelease
 * Usage: gradle buildNsis
 * Usage: gradle pcgenRelease
 *
 * Release script
 * 1. gradle prepareRelease slowtest
 *   a.	Update version - remove snapshot
 *   b.	Commit new version
 *   c.	Clean, Build and check
 *   d. Run slow tests
 * 2. Manual testing using product of  gradle fullZip or gradle buildNsis
 * 3. gradle pcgenRelease
 *   a.	Build
 *   b.	Assemble distributables
 *   c.	Update version - increment version and add snapshot
 *   d.	Commit new version
 */

apply from: "code/gradle/releaseUtils.groovy"
apply plugin: 'java'

ext {

    // Work out the path to the release notes for our current version.
    plainVerNum = version.replaceAll('-SNAPSHOT', '')
    shortVerNum = plainVerNum.replaceAll(/\./, '')
    releaseNotes = "${projectDir}/installers/release-notes/pcgen-release-notes-${shortVerNum}.html"

    nsisBaseFolder = "${buildDir}/nsis/PCGen_${shortVerNum}_base"
    nsisOptionFolder = "${buildDir}/nsis/PCGen_${shortVerNum}_opt"

    // specifications for what to copy to the NSIS base and optional folders
    baseLibs = copySpec {
        from("${buildDir}/libs") {
            exclude 'pcgen-*.jar'
            exclude 'skinlf*.jar'
            exclude 'fop*.jar'
            exclude 'batik*.jar'
        }
        into ('/libs')
    }

    pdfLibs = copySpec {
        from("${buildDir}/libs") {
            include 'fop*.jar'
            include 'batik*.jar'
        }
        into ('/plugin/pdf/libs')
    }

    skinLibs = copySpec {
        from("${buildDir}/libs") {
            include 'skinlf*.jar'
        }
        into ('/plugin/skin/libs')
    }

    basePlugins = copySpec {
        from("${projectDir}/plugins") {
            include '*plugins/**'
            include 'Random Names/**'
            include 'DoomsdayBook.jar'
        }
        into ('/plugins')
    }

    gmgenPlugins = copySpec {
        from("${projectDir}/plugins") {
            exclude '*plugins/**'
            exclude 'Random Names/**'
            exclude 'DoomsdayBook.jar'
        }
        into ('/plugin/gmgen/plugins')
    }

    nonPdfOutput = copySpec {
        from("${projectDir}/outputsheets") {
            exclude '**/pdf/**'
        }
        into ('/outputsheets')
    }

    pdfOutput = copySpec {
        from("${projectDir}/outputsheets") {
            include '**/pdf/**'
        }
        into ('/plugin/pdf/outputsheets')
    }

    baseData = copySpec {
        from("${projectDir}/data") {
            include 'customsources/**'
            include 'homebrew/**'
            include 'publisher_logos/**'
        }
        into ('/data')
    }

    optionalData = copySpec {
        from("${projectDir}/data") {
            exclude 'customsources/**'
            exclude 'homebrew/**'
            exclude 'publisher_logos/**'
        }
        into ('/data')
    }
}

task layoutNsisBase(type: Copy, dependsOn: [createExe, copyToLibs, 
        jar, converterJar]) {
    description="Assemble the required files for all PCGen installations"
    //doFirst {
        // Release notes are required! Causes Autobuild Problem
        //assert file(releaseNotes).exists()
    //}

    into nsisBaseFolder
    from ("${projectDir}/installers/win-installer/Local") {
        into "../Local"
    }
    from ("${projectDir}/installers/win-installer/") {
        into "/docs/acknowledgments/"
        include "PCGenLicense.txt"
    }
    from ("${buildDir}/libs") {
        into "./libs/"
        exclude "pcgen-${version}.jar"
        exclude "pcgen-${version}-batch-convert.jar"
    }
    from ("${buildDir}/libs") {
        include "pcgen-${version}.jar"
        include "pcgen-${version}-batch-convert.jar"
        rename "(.+)-$version(.+)", '$1$2'
    }
    from ("${projectDir}") {
        include 'logging.properties'
        include 'system/**' // Later we want to split out the game modes to optional
        include 'docs/**'
        include 'preview/**'
        include 'characters/*.pcg'
    }
    from ("${buildDir}/launch4j") {
        include 'pcgen.exe'
    }
    from ("${projectDir}/code") {
        include 'pcgen.sh'
    }

    with baseLibs
    with basePlugins
    with nonPdfOutput
    with baseData
}

//See: https://github.com/TheBoegl/gradle-launch4j\
launch4j {
    mainClassName = 'pcgen.system.Main'
    icon = "${projectDir}/installers/win-installer/Local/pcgen.ico"
    jdkPreference = 'preferJre'
    initialHeapSize = 128
    maxHeapSize = 512
    stayAlive = false
    dontWrapJar = true
    bundledJrePath = 'jre'
    jar = "pcgen.jar"
    jreRuntimeBits = "64/32"
    splashFileName = "${projectDir}/installers/win-installer/Local/splash.bmp"
    splashWaitForWindows = true
    splashTimeout = 60
    splashTimeoutError = true
    //Can't be longer than 150 characters
    copyright = "PCGen's source-code is distributed under the GNU Lesser General Public License (LGPL)"
}

task downloadJRE doLast {
    def major = 1
    def micro = 8
    def update = 121
    def extension = 'zip'
    def jre64Dir = new File("${projectDir}/jre/jre_64")
    def jre32Dir = new File("${projectDir}/jre/jre_32")
    if(!jre64Dir.exists()){
        //Only download Windows libraries. Need to add more OS if we go multi OS at any time.
        def filename = "jre-${major}.${micro}.${update}-windows-x64"
        def jre64URL = "http://maven.nuiton.org/nexus/content/repositories/jvm/com/oracle/jre/${major}.${micro}.${update}/${filename}.zip"
        println("Downloading JRE ${major}.${micro}.${update} from ${jre64URL}")
        if(!jre64Dir.exists()){
            download {
                src jre64URL
                dest new File("${projectDir}/jre/", "jre_64.${extension}")
                overwrite false
            }
        }
        //Now untar them
        fileTree(dir: "${projectDir}/jre/").include("*.${extension}").each { simLib ->
            copy {
                println "Unzip $simLib.name"
                def name = simLib.name - '.$extension'
                def zipFile = file("${projectDir}/jre/${simLib.name}")
                def outputDir = "${projectDir}/jre/jre_64/"
                from zipTree(zipFile)
                into outputDir
            }
            new File("${projectDir}/jre/${simLib.name}").delete()
        }
    }
    if(!jre32Dir.exists()){
        //Only download Windows libraries. Need to add more OS if we go multi OS at any time.
        def filename = "jre-${major}.${micro}.${update}-windows-i586"
        def jre32URL = "http://maven.nuiton.org/nexus/content/repositories/jvm/com/oracle/jre/${major}.${micro}.${update}/${filename}.zip"
        println("Downloading JRE ${major}.${micro}.${update} from ${jre32URL}")
        if(!jre32Dir.exists()){
            download {
                src jre32URL
                dest new File("${projectDir}/jre/", "jre_32.${extension}")
                overwrite false
            }
        }
        //Now untar them
        fileTree(dir: "${projectDir}/jre/").include("*.${extension}").each { simLib ->
            copy {
                println "Unzip $simLib.name"
                def name = simLib.name - '.$extension'
                def zipFile = file("${projectDir}/jre/${simLib.name}")
                def outputDir = "${projectDir}/jre/jre_32/"
                from zipTree(zipFile)
                into outputDir
            }
            new File("${projectDir}/jre/${simLib.name}").delete()
        }
    }
}

task layoutNsisOptional(type: Copy, dependsOn: copyToRoot) {
    description="Assemble the optional files for PCGen installations"
    into nsisOptionFolder

    with pdfLibs
    with skinLibs
    with gmgenPlugins
    with pdfOutput
    with optionalData
}

// The perl executable is flagged as an error - not using currently.
// Generate the publisher/data list for the Windows installer script
// task genDataList doLast {
//     new ByteArrayOutputStream().withStream { os ->
//         exec {
//             workingDir = "${projectDir}/installers/win-installer"
//             executable = 'perl'
//             args = ['gendatalist.pl']
//             standardOutput = os
//         }
//         println os.toString()
//     }
// }


// Create the version specific config files for NSIS
task genProjectNsis doLast {
    new File("${projectDir}/installers/win-installer/project.nsh").write("""
; Projects file generated by release.gradle
!define PROJECT_BUILD_DIR "${buildDir}"
!define PROJECT_DIST_BIN_DIR "${buildDir}\\nsis"
!define PROJECT_DIST_DIR "${buildDir}"
!define PROJECT_FINAL_NAME "pcgen"
!define PROJECT_LICENSE_FILE "${projectDir}\\code\\LICENSE"
!define PROJECT_LICENSE_TEXT "This program is Licensed under The GNU Lesser General Public License, Version 2.1."
!define PROJECT_NAME "PCGen"
!define PROJECT_ORGANIZATION "SourceForge"
!define PROJECT_REG_KEY "SOFTWARE\\SourceForge\\PCGen\\${plainVerNum}"
!define PROJECT_REG_UNINSTALL_KEY "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PCGen ${plainVerNum}"
!define PROJECT_STARTMENU_FOLDER "\$SMPROGRAMS\\SourceForge\\PCGen ${plainVerNum}"
!define PROJECT_URL "http://pcgen.sourceforge.net/"
!define PROJECT_VERSION "${plainVerNum}"
""")

    new File("${projectDir}/installers/win-installer/includes/constants.nsh").write("""
; Constants file generated by release.gradle
!define SIMPVER "${shortVerNum}"
!define LONGVER "${plainVerNum}"
!define OutDir "${buildDir}\\release"
!define SrcDir "${buildDir}\\nsis"
""")

    mkdir "${buildDir}/release"
}

// Call NSIS to generate windows installer - Removed "genDataList"
task buildNsis(dependsOn: [layoutNsisBase, layoutNsisOptional,
        genProjectNsis, downloadJRE]) doLast {
    exec {
	workingDir = "${projectDir}/installers/win-installer"
	executable =  'perl'
	args = ['gendatalist.pl']
    }
    if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains('windows')) {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                workingDir = "${buildDir}/nsis"
                executable = 'C:/Program Files (x86)/NSIS/makensis.exe'
                args = ["/V3", "${projectDir}/installers/win-installer/pcgen.nsis"]
            }
        }
    } else {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                workingDir = "${buildDir}/nsis"
                executable = 'makensis'
                args = ["-V3", "${projectDir}/installers/win-installer/pcgen.nsis"]
            }
        }
    }
}
buildNsis.mustRunAfter createExe

task cleanNsis(type: Delete) {
    delete nsisBaseFolder, nsisOptionFolder, "${buildDir}/nsis/Local"
}


task sourcesJar(type: Jar, dependsOn: classes) {
    description = "build source jar file"
    classifier = 'sources'
    from sourceSets.main.allSource
}

task assembleArtifacts(type: Copy, dependsOn: ['build', 'fullZip', 'sourcesJar',
     'buildNsis']) {
    description = "Create the release artifacts and get them into the release folder."
    into "${buildDir}/release"
    // buildNsis puts the exe into the release folder directly
    from ("${buildDir}/libs") {
        include 'pcgen*-sources.jar'
    }
    from ("${buildDir}/distributions") {
        include 'pcgen*-full.zip'
    }
}

// Produce SHA-256 checksums for each release artifact
task checksum(dependsOn: assembleArtifacts) doLast {
    File checksumsFile = new File("${buildDir}/release/SHA256-digests-${version}.txt")
    checksumsFile.delete()
    file("${buildDir}/release").listFiles().each {File file ->
        ant.checksum(file: file, property: "cs_$file.name", algorithm: "sha-256")
        def cs = ant.properties["cs_$file.name"]
        checksumsFile.append("SHA-256 digest for $file.name:\r\n$cs\r\n\r\n")
    }
}


// genDataList removed as it causes release errors, 'genDataList'
task prepareRelease (dependsOn: ['clean', 'build']) {
    description="Prepare PCGen for release. This will update and commit the version, do a clean build including the unit tests and generate the data list for the installer."
}

task pcgenRelease (dependsOn: ['build', 'assembleArtifacts', 'checksum']) {
    description="Release a new version of PCGen. This will build PCGen, produce the release artifacts, then update and commit the version ready for new dev work."
}

task pcgenReleaseOfficial (dependsOn: ['build', 'assembleArtifacts', 'checksum', 'updateVersionRelease']) {
    description="Release a new offical version of PCGen."
}

// Update the PCGen version to indicate a release, then commit the new version
task updateVersionRelease doLast {
    unSnapshotVersion()
    commitFile(new File("gradle.properties"), "Update version for release ${project.version}")
}

// Update the PCGen version for development of the next release, then commit the new version
task updateVersionToNext doLast {
    updateVersion()
    commitFile(new File("gradle.properties"), "Update version for dev work ${project.version}")
}
