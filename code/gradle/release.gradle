/*
 * PCGen release tasks. This file specifies the way in which PCGen alpha, beta
 * and production releases are made.
 *
 * Usage: gradle prepareRelease
 * Usage: gradle buildNsis
 * Usage: gradle pcgenRelease
 *
 * Release script
 * 1. gradle prepareRelease slowtest
 *   a.	Update version - remove snapshot
 *   b.	Commit new version
 *   c.	Clean, Build and check
 *   d. Run slow tests
 * 2. Manual testing using product of  gradle fullZip or gradle buildNsis
 * 3. gradle pcgenRelease
 *   a.	Build
 *   b.	Assemble distributables
 *   c.	Update version - increment version and add snapshot
 *   d.	Commit new version
 */

apply from: "code/gradle/releaseUtils.groovy"
apply plugin: 'java'

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

ext {

    // Work out the path to the release notes for our current version.
    plainVerNum = version.replaceAll('-SNAPSHOT', '')
    shortVerNum = plainVerNum.replaceAll(/\./, '')
    releaseNotes = "${projectDir}/installers/release-notes/pcgen-release-notes-${shortVerNum}.html"

    nsisBaseFolder = "${buildDir}/nsis/PCGen_${shortVerNum}_base"
    nsisOptionFolder = "${buildDir}/nsis/PCGen_${shortVerNum}_opt"

    // specifications for what to copy to the NSIS base and optional folders
    baseLibs = copySpec {
        from("${buildDir}/libs") {
            exclude 'pcgen-*.jar'
            exclude 'skinlf*.jar'
            exclude 'fop*.jar'
            exclude 'batik*.jar'
        }
        into ('/libs')
    }

    pdfLibs = copySpec {
        from("${buildDir}/libs") {
            include 'fop*.jar'
            include 'batik*.jar'
        }
        into ('/plugin/pdf/libs')
    }

    skinLibs = copySpec {
        from("${buildDir}/libs") {
            include 'skinlf*.jar'
        }
        into ('/plugin/skin/libs')
    }

    basePlugins = copySpec {
        from("${projectDir}/plugins") {
            include '*plugins/**'
            include 'Random Names/**'
            include 'DoomsdayBook.jar'
        }
        into ('/plugins')
    }

    gmgenPlugins = copySpec {
        from("${projectDir}/plugins") {
            exclude '*plugins/**'
            exclude 'Random Names/**'
            exclude 'DoomsdayBook.jar'
        }
        into ('/plugin/gmgen/plugins')
    }

    nonPdfOutput = copySpec {
        from("${projectDir}/outputsheets") {
            exclude '**/pdf/**'
        }
        into ('/outputsheets')
    }

    pdfOutput = copySpec {
        from("${projectDir}/outputsheets") {
            include '**/pdf/**'
        }
        into ('/plugin/pdf/outputsheets')
    }

    baseData = copySpec {
        from("${projectDir}/data") {
            include 'customsources/**'
            include 'homebrew/**'
        }
        into ('/data')
    }

    optionalData = copySpec {
        from("${projectDir}/data") {
            exclude 'customsources/**'
            exclude 'homebrew/**'
        }
        into ('/data')
    }
}

task layoutNsisBase(type: Copy, dependsOn: [createExe, copyToLibs, 
        jar, converterJar]) {
    description="Assemble the required files for all PCGen installations"
    //doFirst {
    // Release notes are required! Causes Autobuild Problem
    //assert file(releaseNotes).exists()
    //}

    into nsisBaseFolder
    from ("${projectDir}/installers/win-installer/Local") {
        into "../Local"
    }
    from ("${projectDir}/installers/win-installer/") {
        into "/docs/acknowledgments/"
        include "PCGenLicense.txt"
    }
    from ("${buildDir}/libs") {
        into "./libs/"
        exclude "pcgen-${version}.jar"
        exclude "pcgen-${version}-batch-convert.jar"
    }
    from ("${buildDir}/libs") {
        include "pcgen-${version}.jar"
        include "pcgen-${version}-batch-convert.jar"
        rename "(.+)-$version(.+)", '$1$2'
    }
    from ("${projectDir}") {
        include 'logging.properties'
        include 'system/**' // Later we want to split out the game modes to optional
        include 'docs/**'
        include 'preview/**'
        include 'characters/*.pcg'
    }
    from ("${buildDir}/launch4j") {
        include 'pcgen.exe'
    }
    from ("${projectDir}/code") {
        include 'pcgen.sh'
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("lf"))
        fileMode 0755
    }

    with baseLibs
    with basePlugins
    with nonPdfOutput
    with baseData
}

//See: https://github.com/TheBoegl/gradle-launch4j\
launch4j {
    mainClassName = 'pcgen.system.Main'
    icon = "${projectDir}/installers/win-installer/Local/pcgen.ico"
    jdkPreference = 'preferJre'
    initialHeapSize = 128
    maxHeapSize = 512
    stayAlive = false
    dontWrapJar = true
    bundledJrePath = 'jre'
    jar = "pcgen.jar"
    jreRuntimeBits = "64/32"
    splashFileName = "${projectDir}/installers/win-installer/Local/splash.bmp"
    splashWaitForWindows = true
    splashTimeout = 60
    splashTimeoutError = true
    //Can't be longer than 150 characters
    copyright = "PCGen's source-code is distributed under the GNU Lesser General Public License (LGPL)"
    version = "${shortVerNum}"
}

task downloadJRE doLast {
    def major = 1
    def micro = 8
    def update = 121
    def extension = 'zip'
    def jre64Dir = new File("${projectDir}/jre/jre_64")
    def jre32Dir = new File("${projectDir}/jre/jre_32")
    if(!jre64Dir.exists()){
        //Only download Windows libraries. Need to add more OS if we go multi OS at any time.
        def filename = "jre-${major}.${micro}.${update}-windows-x64"
        def jre64URL = "http://maven.nuiton.org/nexus/content/repositories/jvm/com/oracle/jre/${major}.${micro}.${update}/${filename}.zip"
        println("Downloading JRE ${major}.${micro}.${update} from ${jre64URL}")
        if(!jre64Dir.exists()){
            download {
                src jre64URL
                dest new File("${projectDir}/jre/", "jre_64.${extension}")
                overwrite false
            }
        }
        //Now untar them
        fileTree(dir: "${projectDir}/jre/").include("*.${extension}").each { simLib ->
            copy {
                println "Unzip $simLib.name"
                def name = simLib.name - '.$extension'
                def zipFile = file("${projectDir}/jre/${simLib.name}")
                def outputDir = "${projectDir}/jre/jre_64/"
                from zipTree(zipFile)
                into outputDir
            }
            new File("${projectDir}/jre/${simLib.name}").delete()
        }
    }
    if(!jre32Dir.exists()){
        //Only download Windows libraries. Need to add more OS if we go multi OS at any time.
        def filename = "jre-${major}.${micro}.${update}-windows-i586"
        def jre32URL = "http://maven.nuiton.org/nexus/content/repositories/jvm/com/oracle/jre/${major}.${micro}.${update}/${filename}.zip"
        println("Downloading JRE ${major}.${micro}.${update} from ${jre32URL}")
        if(!jre32Dir.exists()){
            download {
                src jre32URL
                dest new File("${projectDir}/jre/", "jre_32.${extension}")
                overwrite false
            }
        }
        //Now untar them
        fileTree(dir: "${projectDir}/jre/").include("*.${extension}").each { simLib ->
            copy {
                println "Unzip $simLib.name"
                def name = simLib.name - '.$extension'
                def zipFile = file("${projectDir}/jre/${simLib.name}")
                def outputDir = "${projectDir}/jre/jre_32/"
                from zipTree(zipFile)
                into outputDir
            }
            new File("${projectDir}/jre/${simLib.name}").delete()
        }
    }
}

task layoutNsisOptional(type: Copy, dependsOn: copyToOutput) {
    description="Assemble the optional files for PCGen installations"
    into nsisOptionFolder

    with pdfLibs
    with skinLibs
    with gmgenPlugins
    with pdfOutput
    with optionalData
}

// Generate the publisher/data list for the Windows installer script
task genDataList doLast {
    //TODO: find a way to move it to ext section.
    // The list of publishers - add an entry here to correct a reported missing publisher
    Map<String,String> publisherMap  = new HashMap<String,String>();
    publisherMap.put("12_to_midnight","12 to Midnight");
    publisherMap.put("alderac_entertainment_group","Alderac Entertainment Group");
    publisherMap.put("alderac_ent_group","Alderac Entertainment Group");
    publisherMap.put("alea_publishing_group","Alea Publishing Group");
    publisherMap.put("alluria_publishing","Alluria Publishing");
    publisherMap.put("ascension_games","Ascension Games");
    publisherMap.put("atlas_games","Atlas Games");
    publisherMap.put("auran_d20","Auran d20");
    publisherMap.put("avalanche_press","Avalanche Press");
    publisherMap.put("badaxe_games","Bad Axe Games");
    publisherMap.put("bards_and_sages","Bards and Sages");
    publisherMap.put("bastion_press","Bastion Press");
    publisherMap.put("battlefield_press","Battlefield Press");
    publisherMap.put("behemoth3","Behemoth3");
    publisherMap.put("big_finger_games","Big Finger Games");
    publisherMap.put("bloodstone_press","Bloodstone Press");
    publisherMap.put("blue_devil_games","Blue Devil Games");
    publisherMap.put("broken_ruler_games","Broken Ruler Games");
    publisherMap.put("crafty_games","Crafty Games");
    publisherMap.put("creativemountaingames","Creative Mountain Games");
    publisherMap.put("distant_horizons_games","Distant Horizons Games");
    publisherMap.put("doghouse_rules","Dog House Rules");
    publisherMap.put("dragonwing_games","DragonWing Games");
    publisherMap.put("dreamscarred_press","Dreamscarred Press");
    publisherMap.put("en_publishing","EN Publishing");
    publisherMap.put("everyman_gaming","Everyman Gaming");
    publisherMap.put("fantasy_community_council","Fantasy Community Council");
    publisherMap.put("fantasy_flight_games","Fantasy Flight Games");
    publisherMap.put("gallantry_productions","Gallantry Productions");
    publisherMap.put("goodman_games","Goodman Games");
    publisherMap.put("green_ronin","Green Ronin");
    publisherMap.put("legendary_games","Legendary Games");
    publisherMap.put("lions_den_press","Lions Den Press");
    publisherMap.put("lone_wanderer_entertainment","Lone Wanderer Entertainment");
    publisherMap.put("malhavoc_press","Malhavoc Press");
    publisherMap.put("minotaur_games","Minotaur Games");
    publisherMap.put("mongoose","Mongoose");
    publisherMap.put("mongoose_publishing","Mongoose Publishing");
    publisherMap.put("msrd","MSRD");
    publisherMap.put("mythic_dream_studios","Mythic Dreams Studios");
    publisherMap.put("necromancer_games","Necromancer Games");
    publisherMap.put("nitehawk_interactive","Nitehawk Interactive Games");
    publisherMap.put("pandahead","Pandahead");
    publisherMap.put("paradigm_concepts","Paradigm Concepts Inc");
    publisherMap.put("paizo","Paizo Publishing");
    publisherMap.put("parents_basement_games","Parents Basement Games");
    publisherMap.put("pcgen","PCGen OGL");
    publisherMap.put("pinnacle_entertainment","Pinnacle Entertainment");
    publisherMap.put("reality_deviant","Reality Deviant Publications");
    publisherMap.put("rite","Rite Publishing");
    publisherMap.put("rite_publishing","Rite Publishing");
    publisherMap.put("rpg_objects","RPG Objects");
    publisherMap.put("sagaborn","Sagaborn");
    publisherMap.put("secular_games","Secular Games");
    publisherMap.put("silven_publishing","Silven Publishing");
    publisherMap.put("silverthorne_games","Silverthorne Games");
    publisherMap.put("skirmisher_publishing","Skirmisher Publishing LLC");
    publisherMap.put("sovereign_press","Sovereign Press");
    publisherMap.put("srd","SRD");
    publisherMap.put("srd35","SRD35");
    publisherMap.put("st_cooley_publishing","S T Cooley Publishing");
    publisherMap.put("storm_bunny_studios","Storm Bunny Studios");
    publisherMap.put("super_genius_games","Super Genius Games");
    publisherMap.put("sword_and_sorcery_studios","Sword and Sorcery Studios");
    publisherMap.put("swords_edge_publishing","Swords Edge Publishing");
    publisherMap.put("the_game_mechanics","The Game Mechanics Inc");
    publisherMap.put("vigilance_press","Vigilance Press");
    publisherMap.put("wizards_of_the_coast","Wizards of the Coast");
    publisherMap.put("lpj_design","Louis Porter Jr. Design");
    publisherMap.put("total_party_kill_games","Total Party Kill Games");
    publisherMap.put("4_winds_fantasy_gaming","4 Winds Fantasy Gaming");
    publisherMap.put("starfinder","Starfinder");
    File out =new File("$projectDir/installers/win-installer/includes/data.nsh")
    out.delete()
    //List of folder names to ignore.
    List<String> ignoreList = new ArrayList<String>();
    ignoreList.add("homebrew");
    ignoreList.add("zen_test");
    ignoreList.add("customsources");
    new File("${projectDir}/data").eachDir{ 
        if (ignoreList.contains(it.name))
        {
            return
        }
        out.append("SubSection \"$it.name\"\n")
        String dir = it.name
        int subFolders=0
        it.eachDir {
            if (ignoreList.contains(it.name))
            {
                return
            }
            String pubname
            if(publisherMap.get(it.name) != null){
                pubname = publisherMap.get(it.name)
            }else{
                pubname = it.name
            }
            out.append("\tSection \"$pubname\"\n")
            out.append("\tSectionIn 1 2")
            if (it.name == 'msrd')
            {
                out.append(" 3 6");
            }
            if (it.name ==  'pcgen')
            {
                out.append(" 3 4 5");
            }
            if (it.name ==  'srd')
            {
                out.append(" 3 4");
            }
            if (it.name ==  'srd35' || it.name ==  'necromancergames')
            {
                out.append(" 3 5");
            }
            if (it.name ==  'paizo')
            {
                out.append(" 3");
            }
            out.append("\n");
            out.append("\tSetOutPath \"\$INSTDIR\\\${APPDIR}\\data\\${dir}\\${it.name}\"\n");
            out.append("\tFile /r \"\${SrcDir}\\PCGen_\${SIMPVER}_opt\\data\\${dir}\\${it.name}\\*.*\"\n");

            out.append("\tSectionEnd\n\n");
            subFolders++
        }
        if(subFolders == 0){
            String pubname
            if(publisherMap.get(it.name) != null){
                pubname = publisherMap.get(it.name)
            }else{
                pubname = it.name
            }
            out.append("\tSection \"$pubname\"\n")
            out.append("\tSectionIn 1 2")
            out.append("\n");
            out.append("\tSetOutPath \"\$INSTDIR\\\${APPDIR}\\data\\${dir}\"\n");
            out.append("\tFile /r \"\${SrcDir}\\PCGen_\${SIMPVER}_opt\\data\\${dir}\\*.*\"\n");
            out.append("\tSectionEnd\n\n");
        }
        out.append("SubSectionEnd\n\n");
    }
}


// Create the version specific config files for NSIS
task genProjectNsis doLast {
    new File("${projectDir}/installers/win-installer/project.nsh").write("""
; Projects file generated by release.gradle
!define PROJECT_BUILD_DIR "${buildDir}"
!define PROJECT_DIST_BIN_DIR "${buildDir}\\nsis"
!define PROJECT_DIST_DIR "${buildDir}"
!define PROJECT_FINAL_NAME "pcgen"
!define PROJECT_LICENSE_FILE "${projectDir}\\code\\LICENSE"
!define PROJECT_LICENSE_TEXT "This program is Licensed under The GNU Lesser General Public License, Version 2.1."
!define PROJECT_NAME "PCGen"
!define PROJECT_ORGANIZATION "SourceForge"
!define PROJECT_REG_KEY "SOFTWARE\\SourceForge\\PCGen\\${plainVerNum}"
!define PROJECT_REG_UNINSTALL_KEY "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\PCGen ${plainVerNum}"
!define PROJECT_STARTMENU_FOLDER "\$SMPROGRAMS\\SourceForge\\PCGen ${plainVerNum}"
!define PROJECT_URL "http://pcgen.sourceforge.net/"
!define PROJECT_VERSION "${plainVerNum}"
""")

    new File("${projectDir}/installers/win-installer/includes/constants.nsh").write("""
; Constants file generated by release.gradle
!define SIMPVER "${shortVerNum}"
!define LONGVER "${plainVerNum}"
!define OutDir "${releaseDir}"
!define SrcDir "${buildDir}\\nsis"
""")

    mkdir releaseDir
}

// Call NSIS to generate windows installer - Removed "genDataList"
task buildNsis(dependsOn: [layoutNsisBase, layoutNsisOptional,
        genProjectNsis, downloadJRE , genDataList]) doLast {
    if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains('windows')) {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                workingDir = "${buildDir}/nsis"
                executable = 'C:/Program Files (x86)/NSIS/makensis.exe'
                args = ["/V3", "${projectDir}/installers/win-installer/pcgen.nsi"]
            }
        }
    } else {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                workingDir = "${buildDir}/nsis"
                executable = 'makensis'
                args = ["-V3", "${projectDir}/installers/win-installer/pcgen.nsi"]
            }
        }
    }
}
buildNsis.mustRunAfter createExe

task cleanNsis(type: Delete) {
    delete nsisBaseFolder, nsisOptionFolder, "${buildDir}/nsis/Local"
}


task sourcesJar(type: Jar, dependsOn: classes) {
    description = "build source jar file"
    classifier = 'sources'
    from sourceSets.main.allSource
}

task assembleArtifacts(type: Copy, dependsOn: ['build', 'fullZip', 'sourcesJar',
     'buildNsis']) {
    description = "Create the release artifacts and get them into the release folder."
    into releaseDir
    // buildNsis puts the exe into the release folder directly
    from ("${buildDir}/libs") {
        include 'pcgen*-sources.jar'
    }
    from ("${buildDir}/distributions") {
        include 'pcgen*-full.zip'
    }
}

// Produce SHA-256 checksums for each release artifact
task checksum(dependsOn: assembleArtifacts) doLast {
    File checksumsFile = new File("${buildDir}/release/SHA256-digests-${version}.txt")
    checksumsFile.delete()
    file(releaseDir).listFiles().each {File file ->
        ant.checksum(file: file, property: "cs_$file.name", algorithm: "sha-256")
        def cs = ant.properties["cs_$file.name"]
        checksumsFile.append("SHA-256 digest for $file.name:\r\n$cs\r\n\r\n")
    }
}


// genDataList removed as it causes release errors, 'genDataList'
task prepareRelease (dependsOn: ['clean', 'build']) {
    description="Prepare PCGen for release. This will update and commit the version, do a clean build including the unit tests and generate the data list for the installer."
}

task pcgenRelease (dependsOn: ['prepareRelease', 'assembleArtifacts', 'checksum']) {
    description="Release a new version of PCGen. This will build PCGen and produce the release artifacts."
    //Installer is placed in outputDir
}

task pcgenReleaseOfficial (dependsOn: ['pcgenRelease', 'updateVersionRelease']) {
    description="Release a new offical version of PCGen."
}

// Update the PCGen version to indicate a release, then commit the new version
task updateVersionRelease doLast {
    unSnapshotVersion()
    commitFile(new File("gradle.properties"), "Update version for release ${project.version}")
}

// Update the PCGen version for development of the next release, then commit the new version
task updateVersionToNext doLast {
    updateVersion()
    commitFile(new File("gradle.properties"), "Update version for dev work ${project.version}")
}
