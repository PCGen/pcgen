/*
 * PCGen build using the Gradle tool. This file specifies the core build tasks
 * and refers to other files in the code/gradle directory for additional tasks
 * for specific output.
 *
 * Developer build: gradle
 * Incremental dev build: gradle build
 * Full build: gradle all
 * Build and run all tests: gradle clean build slowtest
 * Run the data tests: gradle datatest
 * Run the character integration tests: gradle inttest
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'com.gradle.build-scan' version '1.11'

    id 'application'
    id 'build-dashboard'
    id 'checkstyle'
    id 'findbugs'
    id 'java'
    id 'maven'
    id 'pmd'
    id "de.undercouch.download" version '3.3.0'
    id 'edu.sc.seis.launch4j' version '2.4.3'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'nebula.lint' version '8.3.1'
    id "com.dorongold.task-tree" version '1.3'
}

checkstyle {
    toolVersion = '8.7'
}

pmd {
    toolVersion = '6.0.0'
}

group = 'net.sourceforge.pcgen'

description = """PCGen"""

defaultTasks 'build'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    binDir = "code/bin"
}

//The gradle plugin for netbeans sets the 'mainClass' property instead of 'mainClassName'
//if other IDEs set different properties when trying to execute a given class
//feel free to add them here.
mainClassName = project.hasProperty('mainClass') ? mainClass : 'pcgen.system.Main';

applicationDistribution.from('plugins') {
    into "plugins"
}
applicationDistribution.from('docs') {
    into "docs"
}
applicationDistribution.from('data') {
    into "data"
}
applicationDistribution.from('outputsheets') {
    into "outputsheets"
}
applicationDistribution.from('system') {
    into "system"
}
applicationDistribution.from('preview') {
    into "preview"
}

repositories {
    mavenCentral()
    ivy {
        url "http://pcgen.sourceforge.net/mvnrepo"
        layout "pattern", {
            artifact "[organisation]/jars/[artifact]-[revision].[ext]"
        }
    }
    ivy {
        name "fileRepo"
        url 'http://librepo.pcgen.org'
    }
    ivy {
        name "tempRepo"
        url 'http://52.90.171.70:8080/librepo/'
    }
    jcenter()
}

sourceSets {
    main {
        java {
            srcDirs 'code/src/java'
        }
        resources {
            srcDirs = ['code/src/java', 'code/resources' ]
            include '**/*.properties'
            include '**/*.xml'
            include '**/*.gif'
            include '**/*.png'
            include '**/*.jpg'
        }
    }
    test {
        java {
            srcDirs = ['code/src/utest', 'code/src/testcommon']
        }
    }
    itest {
        java {
            srcDirs = ['code/src/itest', 'code/src/testcommon']
        }
    }
    slowtest {
        java {
            srcDirs = ['code/src/test', 'code/src/testcommon']
        }
    }
}

/* Copy 'master' outputsheets into different genre folders */
task copyMasterSheets(type: Copy) {
    outputs.upToDateWhen { false }

    include 'eqsheet_fantasy_std.htm'
    include 'psheet_fantasy_std.htm'
    from 'outputsheets/d20/fantasy/htmlxml'
    into 'outputsheets/d20/historical/htmlxml'

    into ('../../horror/htmlxml') {
        from 'outputsheets/d20/fantasy/htmlxml'
    }
    into ('../../sciencefiction/htmlxml') {
        from 'outputsheets/d20/fantasy/htmlxml'
    }
    into ('../../western/htmlxml') {
        from 'outputsheets/d20/fantasy/htmlxml'
    }
}

compileJava {
    it.dependsOn 'copyMasterSheets'
}

dependencies {
    compile group: 'cobra', name: 'cobra', version:'0.98.4-pcgen'
    compile group: 'commons-io', name: 'commons-io', version:'2.6'
    compile group: 'org.springframework', name: 'spring-core', version:'5.0.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'5.0.2.RELEASE'
    compile group: 'skinlf', name: 'skinlf', version: '1.2.3'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.7'
    compile group: 'org.apache.xmlgraphics', name: 'fop', version:'2.2'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'jep', name: 'jep', version:'2.4.1'
    compile group: 'org.freemarker', name: 'freemarker', version:'2.3.27-incubating'
    compile group: 'org.jdom', name: 'jdom2', version:'2.0.6'
    compile group: 'xalan', name: 'xalan', version:'2.7.2'
    compile group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: '0.8.1'
    compile group: 'org.mozilla', name: 'rhino', version:'1.7.7.2'

    gradleLint.ignore('unused-dependency') {
        // Eclipse requires this to be in the standard path for some unknown reason.
        compile group: 'org.xmlunit', name: 'xmlunit-core', version:'2.5.1'
        compile group: 'org.xmlunit', name: 'xmlunit-legacy', version:'2.5.1'
        compile group: 'net.sourceforge.pcgen', name: 'PCGen-base', version:'1.0.119'
        compile group: 'net.sourceforge.pcgen', name: 'PCGen-Formula', version:'1.0.136'
        compile group: 'xml-apis', name: 'xml-apis', version:'1.3.04'
    }

    compileOnly group: 'org.jetbrains', name: 'annotations', version:'15.0'
    compileOnly group: 'com.yuvimasory', name: 'orange-extensions', version: '1.3.0'

    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.xmlunit', name: 'xmlunit-matchers', version:'2.5.1'

    itestCompile sourceSets.main.output
    itestCompile configurations.testCompile
    itestCompile sourceSets.test.output

    itestRuntime configurations.testRuntime

    slowtestCompile sourceSets.main.output
    slowtestCompile configurations.testCompile
    slowtestCompile sourceSets.test.output

    slowtestRuntime configurations.testRuntime

    findbugs 'com.google.code.findbugs:findbugs:3.0.1'
    findbugs configurations.findbugsPlugins.dependencies

    findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.2.0'
}

ant.importBuild 'build-gradle.xml'
ant.properties['src.java.dir']="code/src/java"
ant.properties['build.classes.dir']="build/classes/java/main"

configure('jar-all-plugins') {
    group = BasePlugin.BUILD_GROUP // Or use 'build'
    description = 'Create the plugin jars'
}

ext {
    classpath = ""
    configurations.runtime.each { lib -> classpath += " libs/${lib.name} "}
}

jar {
    it.dependsOn 'jar-all-plugins'
    manifest {
        attributes 'Implementation-Title': 'PCGen', 'Implementation-Version': version,
                'Main-Class': 'pcgen.system.Main', 'Class-Path': classpath
    }
}

task converterJar(type: Jar, dependsOn: jar) {
    manifest {
        attributes 'Implementation-Title': 'PCGen Data Converter', 'Implementation-Version': version,
                'Main-Class': 'pcgen.gui2.converter.PCGenDataConvert', 'Class-Path': 'pcgen.jar' + classpath
    }

    classifier = 'batch-convert'
    from sourceSets.main.output
    include 'none'
}

artifacts {
    archives converterJar
}

task copyToLibs(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

import org.apache.tools.ant.filters.FixCrLfFilter;
task copyToRoot(type: Copy, dependsOn: [cleanCreateExe, createExe, copyToLibs, 
        jar, converterJar]) {
    from "$buildDir/libs/pcgen-${version}.jar"
    from "$buildDir/libs/pcgen-${version}-batch-convert.jar"
    from "$buildDir/launch4j/pcgen.exe"
    from("$projectDir/code/pcgen.sh") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("lf"))
        fileMode 0755
    }
    into "$projectDir/output"

    rename "(.+)-$version(.+)", '$1$2'
}

task syncLibsToRoot(type: Sync, dependsOn: [copyToLibs, jar, converterJar]) {
    outputs.dir("$projectDir/libs")
    inputs.files(fileTree("$buildDir/libs"))

    from "$buildDir/libs"
    into "$projectDir/libs"
    exclude "pcgen-*.jar"
}

task cleanRoot(type: Delete) {
    description="Clean up things copied to the root folder by the build"
    delete "$projectDir/pcgen.jar"
    delete "$projectDir/pcgen-batch-convert.jar"
    delete "$projectDir/batch-convert.jar"
    delete "$projectDir/pcgen.sh"
    delete "$projectDir/output"
    delete "$projectDir/libs"
    delete "$projectDir/autobuild.properties"
}

build {
    it.dependsOn 'copyToRoot', 'syncLibsToRoot'
    mustRunAfter clean
}

clean {
    it.dependsOn 'clean-plugins'
    it.dependsOn 'cleanRoot'
}

test {
    exclude 'pcgen/testsupport/**'
}

task itest(type: Test, dependsOn: [jar]) {
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
    systemProperties['jar.path'] = jar.archivePath
}

task slowtest(type: Test, dependsOn: ['jar', 'itest']) {
    testClassesDirs = sourceSets.slowtest.output.classesDirs
    classpath = sourceSets.slowtest.runtimeClasspath
    systemProperties['jar.path'] = jar.archivePath
    forkEvery = 1
    // Exclude the two suites to avoid duplicate test runs.
    exclude 'AllJUnitTests.class'
    exclude 'pcgen/core/AllJUnitTests.class'
}

task datatest(type: Test, dependsOn: 'jar') {
    testClassesDirs = sourceSets.slowtest.output.classesDirs
    classpath = sourceSets.slowtest.runtimeClasspath
    include 'pcgen/persistence/lst/DataTest.class'
    include 'pcgen/persistence/lst/DataLoadTest.class'
}

task inttest(type: Test, dependsOn: 'jar') {
    testClassesDirs = sourceSets.slowtest.output.classesDirs
    classpath = sourceSets.slowtest.runtimeClasspath
    forkEvery = 1
    include 'pcgen/inttest/**/*Test.class'
}

task pfinttest(type: Test, dependsOn: 'jar') {
    testClassesDirs = sourceSets.slowtest.output.classesDirs
    classpath = sourceSets.slowtest.runtimeClasspath
    forkEvery = 1
    include 'pcgen/inttest/game_pathfinder/*Test.class'
}

task rsrdinttest(type: Test, dependsOn: 'jar') {
    testClassesDirs = sourceSets.slowtest.output.classesDirs
    classpath = sourceSets.slowtest.runtimeClasspath
    forkEvery = 1
    include 'pcgen/inttest/game_35e/*Test.class'
}

task msrdinttest(type: Test, dependsOn: 'jar') {
    testClassesDirs = sourceSets.slowtest.output.classesDirs
    classpath = sourceSets.slowtest.runtimeClasspath
    forkEvery = 1
    include 'pcgen/inttest/game_modern/*Test.class'
}

// Do the lot!
task all(dependsOn: ['build', 'slowtest', 'javadoc', 'buildNsis', 'allReports']) {
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

allprojects {
    tasks.withType(Javadoc) {
        options.addBooleanOption('Xdoclint:none', true)
    }
    tasks.withType(Test) {
        maxHeapSize = "512m"
        testLogging {
            exceptionFormat = 'full'
            events 'failed', 'skipped'
        }
    }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      if (['atlassian'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }) {
        selection.reject('unofficial release')
      }
      if (selection.candidate.version == '2.0.2' && selection.candidate.name == 'xml-apis') {
          selection.reject('older than current')
      }
      if (selection.candidate.version == '2.24' && selection.candidate.name == 'jep') {
          selection.reject('older than current')
      }
    }
  }
}

apply from: 'code/gradle/autobuild.gradle'
apply from: 'code/gradle/distribution.gradle'
apply from: 'code/gradle/reporting.gradle'
apply from: 'code/gradle/release.gradle'

