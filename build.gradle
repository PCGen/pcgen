/*
 * PCGen build using the Gradle tool. This file specifies the core build tasks
 * and refers to other files in the code/gradle directory for additional tasks
 * for specific output.
 *
 * Developer build: gradle
 * Incremental dev build: gradle build
 * Full build: gradle all
 * Build and run all tests: gradle clean build slowtest
 * Run the data tests: gradle datatest
 * Run the character integration tests: gradle inttest
 *
 * Author: James Dempsey
 */

plugins {
    id "de.undercouch.download" version "2.1.0"
    id 'edu.sc.seis.launch4j' version '1.6.1'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'build-dashboard'

group = 'net.sourceforge.pcgen'

description = """PCGen"""

defaultTasks 'clean', 'build'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    binDir = "code/bin"

    // Default ignoreTestFailures to false if it is not provided
    if (!hasProperty('ignoreTestFailures')) {
        ignoreTestFailures = false;
    }

}

mainClassName = 'pcgen.system.Main'
applicationDistribution.from('plugins') {
    into "plugins"
}
applicationDistribution.from('docs') {
    into "docs"
}
applicationDistribution.from('data') {
    into "data"
}
applicationDistribution.from('outputsheets') {
    into "outputsheets"
}
applicationDistribution.from('system') {
    into "system"
}
applicationDistribution.from('preview') {
    into "preview"
}
applicationDistribution.from(artifacts) {
    into ""
}

repositories {
    mavenCentral()
    ivy {
        url "http://pcgen.sourceforge.net/mvnrepo"
        layout "pattern", {
            artifact "[organisation]/jars/[artifact]-[revision].[ext]"
        }
    }
    ivy {
        name "fileRepo"
        url 'http://librepo.pcgen.org'
    }
    jcenter()
}

sourceSets {
    main {
        java {
            srcDirs 'code/src/java'
        }
        resources {
            srcDirs 'code/src/java'
            include '**/*.properties'
            include '**/*.xml'
            include '**/*.gif'
            include '**/*.png'
            include '**/*.jpg'
        }
    }
    testcommon {
        java {
            srcDirs = ['code/src/testcommon']
        }
    }
    test {
        java {
            srcDirs = ['code/src/utest']
        }
    }
    itest {
        java {
            srcDirs = ['code/src/itest']
        }
    }
    slowtest {
        java {
            srcDirs = ['code/src/test']
        }
    }

}

/* Copy 'master' outputsheets into different genre folders */
task copyMasterSheets(type: Copy) {
    outputs.upToDateWhen { false }

    include 'eqsheet_fantasy_std.htm'
    include 'psheet_fantasy_std.htm'
    from 'outputsheets/d20/fantasy/htmlxml'
    into 'outputsheets/d20/historical/htmlxml'

    into ('../../horror/htmlxml') {
        from 'outputsheets/d20/fantasy/htmlxml'
    }
    into ('../../sciencefiction/htmlxml') {
        from 'outputsheets/d20/fantasy/htmlxml'
    }
    into ('../../western/htmlxml') {
        from 'outputsheets/d20/fantasy/htmlxml'
    }
}

compileJava {
    it.dependsOn 'copyMasterSheets'
}


dependencies {
    compile group: 'cobra', name: 'cobra', version:'0.98.4-pcgen'
    compile group: 'commons-lang', name: 'commons-lang', version:'2.6'
    compile group: 'commons-io', name: 'commons-io', version:'2.4'
    compile group: 'rhino', name: 'js', version:'1.7R2'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-core', version:'3.1.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.1.3.RELEASE'
    compile group: 'mrj', name: 'MRJ141Stubs', version:'0'
    compile group: 'net.sf.squirrel-sql.thirdparty-non-maven', name: 'skinlf', version:'6.7'
    compile group: 'org.apache.xmlgraphics', name: 'fop', version:'2.1'
    compile group: 'org.apache.pdfbox', name: 'fontbox', version:'2.0.2'
    compile group: 'jep', name: 'jep', version:'2.4.1'
    compile group: 'org.freemarker', name: 'freemarker', version:'2.3.23'
    compile group: 'org.jdom', name: 'jdom', version:'1.1.3'
    compile group: 'xalan', name: 'xalan', version:'2.7.1'
    compile group: 'xerces', name: 'xercesImpl', version:'2.10.0'
    compile group: 'xml-apis', name: 'xml-apis', version:'1.4.01'
    compile group: 'org.apache.avalon.framework', name: 'avalon-framework-api', version:'4.3.1'
    compile group: 'org.apache.avalon.framework', name: 'avalon-framework-impl', version:'4.3.1'
    compile group: 'com.incors.plaf', name: 'kunststoff', version:'2.0.2'
    compile group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: '0.7.0'
    compile group: 'net.sourceforge.pcgen', name: 'PCGen-base', version:'1.0.55'
    compile group: 'net.sourceforge.pcgen', name: 'PCGen-Formula', version:'1.0.64'


    //testCompile group: 'org.easymock', name: 'easymock', version:'2.5.2'
    //testCompile group: 'org.easymock', name: 'easymockclassextension', version:'2.5.2'
    testcommonCompile group: 'junit', name: 'junit', version:'4.11'
    testcommonCompile group: 'xmlunit', name: 'xmlunit', version:'1.3'
    //testCompile group: 'commons-jelly', name: 'commons-jelly-tags-interaction', version:'1.1'
    //testCompile group: 'jline', name: 'jline', version:'2.9'
    //testCompile group: 'com.google.collections', name: 'google-collections', version:'1.0'
    //testCompile group: 'com.cenqua.clover', name: 'clover', version:'1.3.12'
    //testCompile group: 'emma', name: 'emma', version:'2.1.5320'
    //testCompile group: 'emma', name: 'emma_ant', version:'2.1.5320'

    testcommonCompile sourceSets.main.runtimeClasspath
    testCompile sourceSets.testcommon.runtimeClasspath
    itestCompile sourceSets.testcommon.runtimeClasspath
    slowtestCompile sourceSets.testcommon.runtimeClasspath
}

ant.importBuild 'build-gradle.xml'
ant.properties['src.java.dir']="code/src/java"
ant.properties['build.classes.dir']="build/classes/main"

configure('jar-all-plugins') {
    group = BasePlugin.BUILD_GROUP // Or use 'build'
    description = 'Create the plugin jars'
}

ext {
    classpath = ""
    configurations.runtime.each { lib -> classpath += " libs/${lib.name} "}
}

jar {
    it.dependsOn 'jar-all-plugins'
    manifest {
        attributes 'Implementation-Title': 'PCGen', 'Implementation-Version': version,
        	'Main-Class': 'pcgen.system.Main', 'Class-Path': classpath
    }
}

task converterJar(type: Jar, dependsOn: jar) {
    manifest {
        attributes 'Implementation-Title': 'PCGen Data Converter', 'Implementation-Version': version,
        	'Main-Class': 'pcgen.gui2.converter.PCGenDataConvert', 'Class-Path': 'pcgen.jar' + classpath
    }

    classifier = 'batch-convert'
    from sourceSets.main.output
    include 'none'
}

artifacts {
    archives converterJar
}

task copyToLibs(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

task copyToRoot(type: Copy, dependsOn: [copyToLibs, jar, converterJar]) {
    outputs.files.setFrom(file("$buildDir/libs/pcgen-${version}.jar"))

    from "$buildDir/libs/pcgen-${version}.jar"
    from "$buildDir/libs/pcgen-${version}-batch-convert.jar"
    from "$buildDir/release/pcgen.exe"
    from "$projectDir/code/pcgen.sh"
    into "$projectDir"
    rename "(.+)-$version(.+)", '$1$2'
}

task syncLibsToRoot(type: Sync, dependsOn: [copyToLibs, jar, converterJar]) {
    outputs.files.setFrom(file("$buildDir/libs/pcgen-${version}.jar"))

    from "${buildDir}/libs"
    into "$projectDir/libs"
    exclude "pcgen-*.jar"
}

task cleanRoot(type: Delete) {
    description="Clean up things copied to the root folder by the build"
    delete "$projectDir/pcgen.jar"
    delete "$projectDir/pcgen-batch-convert.jar"
    delete "$projectDir/batch-convert.jar"
    delete "$projectDir/pcgen.sh"
    delete "$projectDir/pcgen.exe"
    delete "$projectDir/libs"
    delete "$projectDir/autobuild.properties"
    delete "$projectDir/svn.properties"
}

build {
    it.dependsOn 'copyToRoot', 'syncLibsToRoot'
}

clean {
    it.dependsOn 'clean-plugins'
    it.dependsOn 'cleanRoot'
}

test {
    exclude 'pcgen/testsupport/**'
    //	maxParallelForks 4
    testLogging {
        exceptionFormat = 'full'
    }
}

task itest(type: Test, dependsOn: jar) {
    testClassesDir = sourceSets.itest.output.classesDir
    classpath = sourceSets.itest.runtimeClasspath
    systemProperties['jar.path'] = jar.archivePath
    ignoreFailures=ignoreTestFailures
    testLogging {
        exceptionFormat = 'full'
    }
}

task slowtest(type: Test, dependsOn: ['jar', 'itest']) {
    testClassesDir = sourceSets.slowtest.output.classesDir
    classpath = sourceSets.slowtest.runtimeClasspath
    systemProperties['jar.path'] = jar.archivePath
    forkEvery = 1
    maxHeapSize = "512m"
    // Exclude the two suites to avoid duplicate test runs.
    exclude 'AllJUnitTests.class'
    exclude 'pcgen/core/AllJUnitTests.class'
    ignoreFailures=ignoreTestFailures
    testLogging {
        exceptionFormat = 'full'
    }
}

task datatest(type: Test, dependsOn: 'jar') {
    testClassesDir = sourceSets.slowtest.output.classesDir
    classpath = sourceSets.slowtest.runtimeClasspath
    include 'pcgen/persistence/lst/DataTest.class'
    include 'pcgen/persistence/lst/DataLoadTest.class'
    ignoreFailures=ignoreTestFailures
    maxHeapSize = "512m"
    testLogging {
        exceptionFormat = 'full'
    }
}

task inttest(type: Test, dependsOn: 'jar') {
    testClassesDir = sourceSets.slowtest.output.classesDir
    classpath = sourceSets.slowtest.runtimeClasspath
    forkEvery = 1
    maxHeapSize = "512m"
    include 'pcgen/inttest/**/*Test.class'
    testLogging {
        exceptionFormat = 'full'
    }

    // Report each test as it is started.
    beforeTest { descriptor ->
    	logger.lifecycle("Running test: " + descriptor)
    }
}

task pfinttest(type: Test, dependsOn: 'jar') {
    testClassesDir = sourceSets.slowtest.output.classesDir
    classpath = sourceSets.slowtest.runtimeClasspath
    forkEvery = 1
    maxHeapSize = "512m"
    include 'pcgen/inttest/game_pathfinder/*Test.class'
    testLogging {
        exceptionFormat = 'full'
    }

    // Report each test as it is started.
    beforeTest { descriptor ->
    	logger.lifecycle("Running test: " + descriptor)
    }
}

task rsrdinttest(type: Test, dependsOn: 'jar') {
    testClassesDir = sourceSets.slowtest.output.classesDir
    classpath = sourceSets.slowtest.runtimeClasspath
    forkEvery = 1
    maxHeapSize = "512m"
    include 'pcgen/inttest/game_35e/*Test.class'
    testLogging {
        exceptionFormat = 'full'
    }

    // Report each test as it is started.
    beforeTest { descriptor ->
    	logger.lifecycle("Running test: " + descriptor)
    }
}

task msrdinttest(type: Test, dependsOn: 'jar') {
    testClassesDir = sourceSets.slowtest.output.classesDir
    classpath = sourceSets.slowtest.runtimeClasspath
    forkEvery = 1
    maxHeapSize = "512m"
    include 'pcgen/inttest/game_modern/*Test.class'
    testLogging {
        exceptionFormat = 'full'
    }

    // Report each test as it is started.
    beforeTest { descriptor ->
    	logger.lifecycle("Running test: " + descriptor)
    }
}

// Do the lot!
task all(dependsOn: ['clean', 'build', 'slowtest', 'javadoc', 'allReports']) {
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

//Disable failing on javadoc warning
allprojects {
    if(JavaVersion.current() == JavaVersion.VERSION_1_8){
        tasks.withType(Javadoc) {
            options.addBooleanOption('Xdoclint:none', true)
        }
    }
}

apply from: 'code/gradle/autobuild.gradle'
apply from: 'code/gradle/distribution.gradle'
apply from: 'code/gradle/reporting.gradle'
apply from: 'code/gradle/release.gradle'

