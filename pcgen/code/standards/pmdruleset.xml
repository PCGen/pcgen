<?xml version="1.0" encoding="UTF-8"?>

<!--
   - Code quality rule set for use with the PCGen Java code.
   - See https://pmd.github.io/pmd-5.8.1/pmd-java/rules/index.html
   - for descriptions of the rules applied. 
 -->
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    name="PCGen Code Rules"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 
                        http://pmd.sf.net/ruleset_xml_schema.xsd" >

  <description>
  PMD rules customised for PCGen's code. 
  </description>

  <!--<rule ref="rulesets/java/android.xml">-->
  <rule ref="rulesets/java/basic.xml">
    <exclude name="AvoidUsingHardCodedIP" />
    <exclude name="AvoidDecimalLiteralsInBigDecimalConstructor" />
    <exclude name="ForLoopShouldBeWhileLoop" />
    <exclude name="BigIntegerInstantiation" />
    <exclude name="CollapsibleIfStatements" />
    <exclude name="AvoidBranchingStatementAsLastInLoop" />
    <exclude name="OverrideBothEqualsAndHashcode" />
    <exclude name="SimplifiedTernary" />
  </rule>
  <rule ref="rulesets/java/braces.xml"/>
  <rule ref="rulesets/java/clone.xml">
    <exclude name="ProperCloneImplementation" />
    <exclude name="CloneThrowsCloneNotSupportedException" />
    <exclude name="CloneMethodMustImplementCloneable" />
    <exclude name="CloneMethodMustBePublic" />
  </rule>
  <rule ref="rulesets/java/codesize.xml" >
    <exclude name="TooManyFields" />
    <exclude name="TooManyMethods" />
    <exclude name="CyclomaticComplexity" />
    <exclude name="StdCyclomaticComplexity" />
    <exclude name="ModifiedCyclomaticComplexity" />
    <exclude name="ExcessivePublicCount" />
    <exclude name="NPathComplexity" />
    <exclude name="ExcessiveMethodLength" />
    <exclude name="ExcessiveClassLength" />
    <exclude name="NcssConstructorCount" />
    <exclude name="NcssMethodCount" />
    <exclude name="NcssTypeCount" />
    <exclude name="ExcessiveParameterList" />
  </rule>
  <!--<rule ref="rulesets/java/comments.xml" />-->
  <!-- <rule ref="rulesets/java/controversial.xml"> -->
  <rule ref="rulesets/java/coupling.xml">
    <exclude name="LoosePackageCoupling" />
    <exclude name="CouplingBetweenObjects" />
    <exclude name="ExcessiveImports" />
    <exclude name="LawOfDemeter" />
    <exclude name="LooseCoupling" />
  </rule>
  <rule ref="rulesets/java/design.xml">
    <exclude name="EqualsNull" />
    <exclude name="InstantiationToGetClass" />
    <exclude name="SingleMethodSingleton" />
    <exclude name="SingletonClassReturningNewInstance" />
    <exclude name="SimplifyBooleanReturns" />
    <exclude name="AvoidProtectedMethodInFinalClassNotExtending" />
    <exclude name="PositionLiteralsFirstInComparisons" />
    <exclude name="PositionLiteralsFirstInCaseInsensitiveComparisons" />
    <exclude name="ConstantsInInterface" />
    <exclude name="AccessorMethodGeneration" />
    <exclude name="UseUtilityClass" />
    <exclude name="SimplifyBooleanExpressions" />
    <exclude name="SwitchStmtsShouldHaveDefault" />
    <exclude name="AccessorClassGeneration" />
    <exclude name="AvoidDeeplyNestedIfStmts" />
    <exclude name="AvoidReassigningParameters" />
    <exclude name="SwitchDensity" />
    <exclude name="ConstructorCallsOverridableMethod" />
    <exclude name="FinalFieldCouldBeStatic" />
    <exclude name="CloseResource" />
    <exclude name="OptimizableToArrayCall" />
    <exclude name="ConfusingTernary" />
    <exclude name="SimpleDateFormatNeedsLocale" />
    <exclude name="ImmutableField" />
    <exclude name="UseLocaleWithCaseConversions" />
    <exclude name="AvoidProtectedFieldInFinalClass" />
    <exclude name="AssignmentToNonFinalStatic" />
    <exclude name="AvoidSynchronizedAtMethodLevel" />
    <exclude name="MissingBreakInSwitch" />
    <exclude name="AbstractClassWithoutAbstractMethod" />
    <exclude name="SimplifyConditional" />
    <exclude name="CompareObjectsWithEquals" />
    <exclude name="UnnecessaryLocalBeforeReturn" />
    <exclude name="NonThreadSafeSingleton" />
    <exclude name="UncommentedEmptyMethodBody" />
    <exclude name="UncommentedEmptyConstructor" />
    <exclude name="UnsynchronizedStaticDateFormatter" />
    <exclude name="PreserveStackTrace" />
    <exclude name="UseCollectionIsEmpty" />
    <exclude name="ClassWithOnlyPrivateConstructorsShouldBeFinal" />
    <exclude name="EmptyMethodInAbstractClassShouldBeAbstract" />
    <exclude name="SingularField" />
    <exclude name="ReturnEmptyArrayRatherThanNull" />
    <exclude name="AbstractClassWithoutAnyMethod" />
    <exclude name="TooFewBranchesForASwitchStatement" />
    <exclude name="LogicInversion" />
    <!-- This is excluded because it's a tradeoff: it creates a warning to use it, which then has to be addressed -->
    <exclude name="UseVarargs" />
    <exclude name="FieldDeclarationsShouldBeAtStartOfClass" />
    <exclude name="GodClass" />
  </rule>
  <rule ref="rulesets/java/empty.xml">
    <exclude name="EmptyCatchBlock" />
    <exclude name="EmptyIfStmt" />
    <exclude name="EmptyStaticInitializer" />
    <exclude name="EmptyInitializer" />
    <exclude name="EmptyStatementNotInLoop" />
  </rule>
  <rule ref="rulesets/java/finalizers.xml"/>
  <rule ref="rulesets/java/imports.xml">
    <exclude name="UnnecessaryFullyQualifiedName" />
    <exclude name="TooManyStaticImports" />
    <exclude name="ImportFromSamePackage" />
  </rule>
  <!--<rule ref="rulesets/java/j2ee.xml" />-->
  <!--<rule ref="rulesets/java/javabeans.xml" />-->
  <rule ref="rulesets/java/junit.xml" >
    <exclude name="UseAssertTrueInsteadOfAssertEquals" />
    <exclude name="JUnitTestContainsTooManyAsserts" />
    <exclude name="UseAssertSameInsteadOfAssertTrue" />
    <exclude name="UseAssertEqualsInsteadOfAssertTrue" />
    <exclude name="JUnitSpelling" />
    <exclude name="JUnitTestsShouldIncludeAssert" />
    <exclude name="JUnitAssertionsShouldIncludeMessage" />
    <exclude name="TestClassWithoutTestCases" />
  </rule>
  <!--<rule ref="rulesets/java/jakarta.xml" />-->
  <rule ref="rulesets/java/logging-jakarta-commons.xml" />
  <rule ref="rulesets/java/logging-java.xml">
    <exclude name="AvoidPrintStackTrace" />
    <exclude name="SystemPrintln" />
    <exclude name="GuardLogStatementJavaUtil" />
    <exclude name="LoggerIsNotStaticFinal" />
  </rule>
  <rule ref="rulesets/java/migrating.xml">
    <exclude name="IntegerInstantiation" />
    <exclude name="ReplaceVectorWithList" />
    <exclude name="ReplaceHashtableWithMap" />
    <exclude name="ReplaceEnumerationWithIterator" />
    <exclude name="JUnit4TestShouldUseBeforeAnnotation" />
    <exclude name="JUnit4TestShouldUseAfterAnnotation" />
    <exclude name="JUnit4TestShouldUseTestAnnotation" />
    <exclude name="JUnit4SuitesShouldUseSuiteAnnotation" />
    <exclude name="JUnitUseExpected" />
  </rule>
  <!--<rule ref="rulesets/java/naming.xml" />-->
  <rule ref="rulesets/java/optimizations.xml">
    <exclude name="RedundantFieldInitializer" />
    <!-- This is excluded because and this generates "noise pollution" around the usage of final, our semantic usage is as a trigger it is necessary, not when it's possible -->
    <exclude name="MethodArgumentCouldBeFinal" />
    <!-- This is excluded because and this generates "noise pollution" around the usage of final, our semantic usage is as a trigger it is necessary, not when it's possible -->
    <exclude name="LocalVariableCouldBeFinal" />
    <exclude name="AvoidInstantiatingObjectsInLoops" />
    <exclude name="PrematureDeclaration" />
    <exclude name="UseStringBufferForStringAppends" />
    <exclude name="UseArrayListInsteadOfVector" />
    <exclude name="AddEmptyString" />
    <exclude name="UnnecessaryWrapperObjectCreation" />
    <exclude name="SimplifyStartsWith" />
  </rule>
  <rule ref="rulesets/java/strictexception.xml">
    <exclude name="AvoidCatchingGenericException" />
    <exclude name="AvoidCatchingNPE" />
    <exclude name="AvoidThrowingRawExceptionTypes" />
    <exclude name="SignatureDeclareThrowsException" />
    <exclude name="AvoidCatchingThrowable" />
    <exclude name="DoNotThrowExceptionInFinally" />
    <exclude name="AvoidThrowingNullPointerException" />
  </rule>
  <rule ref="rulesets/java/strings.xml">
    <exclude name="AvoidDuplicateLiterals" />
    <exclude name="InefficientStringBuffering" />
    <exclude name="AppendCharacterWithChar" />
    <exclude name="ConsecutiveLiteralAppends" />
    <exclude name="AvoidStringBufferField" />
    <!-- This is excluded because it's a micro-optimization (JIT compilation would eliminate the performance penalty) and enforcing it encourages writing less readable code -->
    <exclude name="ConsecutiveAppendsShouldReuse" />
    <exclude name="UseIndexOfChar" />
    <exclude name="UseEqualsToCompareStrings" />
    <exclude name="UselessStringValueOf" />
    <exclude name="InsufficientStringBufferDeclaration" />
    <exclude name="StringToString" />
    <exclude name="InefficientEmptyStringCheck" />
    <exclude name="StringInstantiation" />
  </rule>
  <rule ref="rulesets/java/sunsecure.xml">
    <exclude name="MethodReturnsInternalArray" />
    <exclude name="ArrayIsStoredDirectly" />
  </rule>
  <rule ref="rulesets/java/typeresolution.xml">
    <exclude name="LooseCoupling" />
    <exclude name="SignatureDeclareThrowsException" />
  </rule>
  <rule ref="rulesets/java/unnecessary.xml">
    <!-- This is excluded because we use "useless" parenthesis for readability -->
    <exclude name="UselessParentheses" />
    <exclude name="UselessOverridingMethod" />
    <exclude name="UnnecessaryReturn" />
    <exclude name="UselessQualifiedThis" />
    <exclude name="UnnecessaryFinalModifier" />
    <!-- This is excluded because we use "public" in Interfaces almost universally (as a semantic hint as to its real behavior) -->
    <exclude name="UnnecessaryModifier" />
  </rule>
  <rule ref="rulesets/java/unusedcode.xml">
    <exclude name="UnusedFormalParameter" />
    <exclude name="UnusedLocalVariable" />
    <exclude name="UnusedPrivateMethod" />
    <exclude name="UnusedPrivateField" />
  </rule>
</ruleset>
