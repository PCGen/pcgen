<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
<meta http-equiv="content-type" content="text-html; charset=utf-8" />
<title>|NAME| - |PLAYERNAME| (|POOL.COST| Points) in Statblock Format</title>
<!--
	This format was requested by one of the people in my group.
	It's designed to match the official WotC Statblock style.
	~~~ arcady 11/10/2001

       Barak helped me (basically, he told me what to do!) update this.  Changes include:
       modifying the spellbook so it conforms with WotC style better by listing the
       number of times a spell is memorized, listing multiple spellbooks, listing only
       chosen feats (not class feats or virtual feats, as WotC statblocks do not do this
       either), correcting some syntax for 4.x.x, and a few other minor format changes.
       ~~~ Zach (zach@zachshuford.com) 10/29/2002

	*** Updated 7/5/2004 - Chuck Pint ***
		Added FACE to stat block
		Updated to use Style sheet & XHTML 1.0
		Fixed loops to not put out empties

	*** Updated 7/27/2004 - Chuck Pint ***
		Fixed some badly formed SPELLSINBOOK tags

$Revision$
$Author$
$Date$

-->
<style type="text/css">
	body  { font-size:10pt; text-align:left; color:black; background:white; font-weight:normal; margin: 0px; padding: 0px; }
	div { font-size:10pt; text-align:left; color:black; background:white; font-weight:normal; margin: 0px 50px; padding: 0px; }
	.header { display:block; font-size:7pt; text-align:center; }
</style>
</head>
<body>
<span class="header">Created using PCGen |EXPORT.VERSION| on |EXPORT.DATE|</span>
<p><b>|NAME|, |GENDER| |RACE||%REGION| From |REGION|.|%| |CLASSLIST|</b>&nbsp;
CR 
|IIF(CR:0)|
&mdash;
|ELSE|
|CR|
|ENDIF|
; Size: |SIZE| Face: |FACE.SHORT| Type 
|IIF(RACETYPE:None)|
|TEXT.TITLE.TYPE|
|ELSE|
|RACETYPE|
|ENDIF|
|IIF(VAR.IF(var("COUNT[RACESUBTYPES]")==0;1;0):1)|
; 
|ELSE|
 (
|FOR,%subtype,0,COUNT[RACESUBTYPES]-2,1,1|
|RACESUBTYPE.%subtype|, 
|ENDFOR|
|FOR,%subtype,COUNT[RACESUBTYPES]-1,COUNT[RACESUBTYPES]-1,1,1|
|RACESUBTYPE.%subtype|
|ENDFOR|
); 
|ENDIF|
HD |HITDICE|; 
|IIF(VAR.IF(var("UseAlternateDamage")==0;1;0):1)|
hp |HP|;
|ELSE|
vp |HP|; wp |ALTHP|;
|ENDIF|
Init |INITIATIVEMOD| 
(|STAT.1.MOD| Dex, |INITIATIVEBONUS| Misc); Spd |MOVEMENT|; AC 
|AC.Total| (touch |AC.Touch|, flatfooted |AC.Flatfooted|), 
|FOR,%weap,0,COUNT[EQTYPE.WEAPON]-2,1,0|
|IIF(WEAPON.%weap.BASEHIT:INVALIDTEXT.TOHIT)|
|WEAPON.%weap.NAME| |WEAPON.%weap.THHIT| |WEAPON.%weap.TYPE| (|WEAPON.%weap.THDAMAGE| |WEAPON.%weap.CRIT|/x|WEAPON.%weap.MULT| |WEAPON.%weap.HAND| |WEAPON.%weap.SIZE| |WEAPON.%weap.SPROP|) or 
|ELSE|
|WEAPON.%weap.NAME| |WEAPON.%weap.BASEHIT| |WEAPON.%weap.RANGE|/|WEAPON.%weap.TYPE| (|WEAPON.%weap.DAMAGE| |WEAPON.%weap.CRIT|/x|WEAPON.%weap.MULT| |WEAPON.%weap.HAND| |WEAPON.%weap.SIZE| |WEAPON.%weap.SPROP|) or 
|ENDIF|
|ENDFOR|
|IIF(VAR.IF(var("COUNT[EQTYPE.WEAPON]")>0;1;0):1)|
|FOR,%weap,COUNT[EQTYPE.WEAPON]-1,COUNT[EQTYPE.WEAPON]-1,1,0|
|IIF(WEAPON.%weap.BASEHIT:INVALIDTEXT.TOHIT)|
|WEAPON.%weap.NAME| |WEAPON.%weap.THHIT| |WEAPON.%weap.TYPE| (|WEAPON.%weap.THDAMAGE| |WEAPON.%weap.CRIT|/x|WEAPON.%weap.MULT| |WEAPON.%weap.HAND| |WEAPON.%weap.SIZE| |WEAPON.%weap.SPROP|); 
|ELSE|
|WEAPON.%weap.NAME| |WEAPON.%weap.BASEHIT| |WEAPON.%weap.RANGE|/|WEAPON.%weap.TYPE| (|WEAPON.%weap.DAMAGE| |WEAPON.%weap.CRIT|/x|WEAPON.%weap.MULT| |WEAPON.%weap.HAND| |WEAPON.%weap.SIZE| |WEAPON.%weap.SPROP|); 
|ENDIF|
|ENDFOR|
|ENDIF|
SA: 
|IIF(count("ABILITIES";"CATEGORY=Special Ability";"VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")>0)|
|FOR,%specialAbilities,0,count("ABILITIES","CATEGORY=Special Ability","VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")-1,1,0| 
|IIF(ABILITYALL.Special Ability.VISIBLE.%specialAbilities.TYPE:Extraordinary)|
|ABILITYALL.Special Ability.VISIBLE.%specialAbilities| (Ex), 
|ELSE|
|IIF(ABILITYALL.Special Ability.VISIBLE.%specialAbilities.TYPE:Supernatural)|
|ABILITYALL.Special Ability.VISIBLE.%specialAbilities| (Su), 
|ELSE|
|IIF(ABILITYALL.Special Ability.VISIBLE.%specialAbilities.TYPE:SpellLike)|
|ABILITYALL.Special Ability.VISIBLE.%specialAbilities| (Sp), 
|ELSE|
|IIF(ABILITYALL.Special Ability.VISIBLE.%specialAbilities.TYPE:PsiLike)|
|ABILITYALL.Special Ability.VISIBLE.%specialAbilities| (Ps), 
|ELSE|
|ABILITYALL.Special Ability.VISIBLE.%specialAbilities|, 
|ENDIF|
|ENDIF|
|ENDIF|
|ENDIF|
|ENDFOR|
|ENDIF|
|FOR,%DRtest,STRLEN[DR],STRLEN[DR],1,0|
|IIF(%DRtest:0)|
|ELSE|
Damage Reduction |DR|, 
|ENDIF|
|ENDFOR|
|IIF(SR:0)|
|ELSE|
Spell Resistance |SR|, 
|ENDIF|
 |SPECIALLIST|; Vision: |VISION| AL: |ALIGNMENT.SHORT|; Sv: 
|FOR,%checks,0,COUNT[CHECKS]-2,1,0|
|IIF(CHECK.%checks.NAME:Fortitude)|
Fort 
|ELSE|
|IIF(CHECK.%checks.NAME:Reflex)|
Ref 
|ELSE|
|IIF(CHECK.%checks.NAME:Will)|
Will 
|ELSE|
|CHECK.%checks.NAME| 
|ENDIF|
|ENDIF|
|ENDIF|
|CHECK.%checks.TOTAL|, 
|ENDFOR|
|FOR,%checks,COUNT[CHECKS]-1,COUNT[CHECKS]-1,1,0|
|IIF(CHECK.%checks.NAME:Fortitude)|
Fort 
|ELSE|
|IIF(CHECK.%checks.NAME:Reflex)|
Ref 
|ELSE|
|IIF(CHECK.%checks.NAME:Will)|
Will 
|ELSE|
|CHECK.%checks.NAME| 
|ENDIF|
|ENDIF|
|ENDIF|
|CHECK.%checks.TOTAL|; 
|ENDFOR|
|FOR,%stat,0,COUNT[STATS]-2,1,1|
|STAT.%stat.NAME|&nbsp;|STAT.%stat|, 
|ENDFOR|
|FOR,%stat,COUNT[STATS]-1,COUNT[STATS]-1,1,1|
|STAT.%stat.NAME|&nbsp;|STAT.%stat| 
|ENDFOR|
</p>
<div><i>Skills and Feats</i>:&nbsp; |SKILLLISTMODS|;
|FEATLIST|
<br />
<i>Possessions</i>:&nbsp;
|FOR,%equip,0,COUNT[EQUIPMENT]-2,1,0|
&nbsp;|EQ.%equip.QTY|&nbsp;|EQ.%equip.NAME|,
|ENDFOR|
|FOR,%equip,COUNT[EQUIPMENT]-1,COUNT[EQUIPMENT]-1,1,0|
&nbsp;|EQ.%equip.QTY|&nbsp;|EQ.%equip.NAME|
|ENDFOR|


<!-- SpellBooks -->
|FOR,%spellbook,2,COUNT[SPELLBOOKS]-1,1,0|
|IIF(SPELLBOOK.%spellbook.TYPE:Spell Book)|
<br /><b>|SPELLBOOKNAME.%spellbook|</b>
|FOR,%class,COUNT[SPELLRACE],COUNT[SPELLRACE]+COUNT[CLASSES],1,1|
|IIF(SPELLLISTMEMORIZE.%class:false)|
|ELSE|
|FOR,%level,0,9,1,1|
|FOR,%spelllevelcount,COUNT[SPELLSINBOOK.%class.%spellbook.%level],COUNT[SPELLSINBOOK.%class.%spellbook.%level],1,0|
|IIF(%spelllevelcount:0)|
<!-- no memorized spells for SPELLSINBOOK.%class %spellbook %level -->
|ELSE|
|MANUALWHITESPACE||%level||TEXT.NUMSUFFIX.%level||ENDMANUALWHITESPACE| -
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-2,1,0|
<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:1)|
|ELSE|
(|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|)
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
(DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|)
|ENDIF|
, 
|ENDFOR|
|FOR,%spell,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
|SPELLMEM.%class.%spellbook.%level.%spell.BONUSSPELL|<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:1)|
|ELSE|
(|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|)
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
(DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|)
|ENDIF|
|ENDFOR|
|ENDIF|
|ENDFOR|
|ENDFOR|
|ENDIF|
|ENDFOR|
|ENDIF|
|ENDFOR|
<!-- End SpellBooks -->

|%DOMAIN.1|
<br /><i>Deity:</i> |DEITY| <i>Domains:</i> |FOR.1,COUNT[DOMAINS]+1,1,\DOMAIN.%\ (\DOMAIN.%.POWER\), ,NONE,2|

|%|
<!-- Prepared Spells -->
|FOR,%spellbook,2,COUNT[SPELLBOOKS]-1,1,0|
|IIF(SPELLBOOK.%spellbook.TYPE:Prepared Spell List)|
<br /><b>|SPELLBOOKNAME.%spellbook| Prepared Spells: </b>
|FOR,%class,COUNT[SPELLRACE],COUNT[SPELLRACE]+COUNT[CLASSES]-1,1,1|
|IIF(SPELLLISTMEMORIZE.%class:false)|
|ELSE|
|SPELLLISTCLASS.%class| (CL |SPELLLISTCLASS.%class.LEVEL|): 
|FOR,%level,0,9,1,1|
|FOR,%spelllevelcount,COUNT[SPELLSINBOOK.%class.%spellbook.%level],COUNT[SPELLSINBOOK.%class.%spellbook.%level],1,0|
|IIF(%spelllevelcount:0)|
<!-- no memorized spells for SPELLSINBOOK.%class %spellbook %level -->
|ELSE|
|MANUALWHITESPACE||%level||TEXT.NUMSUFFIX.%level||ENDMANUALWHITESPACE| -
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-2,1,0|
<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:1)|
|ELSE|
(|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|)
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
(DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|)
|ENDIF|
, 
|ENDFOR|
|FOR,%spell,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
|SPELLMEM.%class.%spellbook.%level.%spell.BONUSSPELL|<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:1)|
|ELSE|
(|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|)
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
(DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|)
|ENDIF|
|ENDFOR|
|ENDIF|
|ENDFOR|
|ENDFOR|
|ENDIF|
|ENDFOR|
|ELSE|
|ENDIF|
|ENDFOR|
<!-- End Prepared Spells -->

<!-- Innate Spell-Like Abilities -->
|IIF(VAR.IF(VAR("COUNT[SPELLSINBOOK.0.1.0]")>0;1;0):1)|
<br /><b>Innate Spell-Like Abilities:</b>
|FOR,%spellbook,1,1,1,0|
|FOR,%class,0,0,1,0|
|FOR,%level,0,0,1,0|
|%SPELLLISTBOOK.%class.%level.%spellbook|
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i> (
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|, 
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:At Will)|
at will) 
|ELSE|
|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|/|SPELLMEM.%class.%spellbook.%level.%spell.TIMEUNIT|) 
|ENDIF|
|ENDFOR|
|%|
|ENDFOR|
|ENDFOR|
|ENDFOR|
|ENDIF|
<!-- End Innate Spell-Like Abilities -->

<!-- Other Spell-Like Abilities -->
|FOR,%spellbook,2,COUNT[SPELLBOOKS]-1,1,0|
|IIF(SPELLBOOK.%spellbook.TYPE:Innate Spell List)|
|IIF(VAR.IF(VAR("COUNT[SPELLSINBOOK.0.%spellbook.0]")>0;1;0):1)|
<br /><b>|SPELLBOOK.%spellbook.NAME| Spell-Like Abilities:</b>
|FOR,%class,0,0,1,0|
|FOR,%level,0,0,1,0|
|%SPELLLISTBOOK.%class.%level.%spellbook|
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i> (
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|, 
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:At Will)|
at will) 
|ELSE|
|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|/|SPELLMEM.%class.%spellbook.%level.%spell.TIMEUNIT|) 
|ENDIF|
|ENDFOR|
|%|
|ENDFOR|
|ENDFOR|
|ENDIF|
|ENDIF|
|ENDFOR|
<!-- End Other Spell-Like Abilities -->

|FOR,%class,COUNT[SPELLRACE],COUNT[CLASSES],1,1|
|%SPELLLISTCLASS.%class| 
<br /><b>|SPELLLISTCLASS.%class|: </b>
<i>Spells per Day</i>: (|FOR.0,9,1,\SPELLLISTCAST.%class.%\,NONE,/,0| DC:|SPELLLISTDC.%class.0|+spell level) 
<i>Known: </i>
|FOR,%level,0,MAXSPELLLEVEL.%class,1,1|
|%SPELLLISTBOOK.%class.%level.0|
<b>|MANUALWHITESPACE||%level||TEXT.NUMSUFFIX.%level||ENDMANUALWHITESPACE| - </b>
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.0.%level]-2,1,1|
|SPELLMEM.%class.0.%level.%spell.NAME|,
|ENDFOR|
|FOR,%spell,COUNT[SPELLSINBOOK.%class.0.%level]-1,COUNT[SPELLSINBOOK.%class.0.%level]-1,1,1|
|SPELLMEM.%class.0.%level.%spell.NAME|
|ENDFOR|
|%|
|ENDFOR|
|ENDFOR|
<p>&nbsp;&nbsp;&nbsp; </p>
</div>
</body>
</html>
