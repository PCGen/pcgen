<html>
<head>
<meta http-equiv="content-type" content="text-html; charset=utf-8" />
<title>|NAME| - |PLAYERNAME| (|POOL.COST| Points) in Statblock Format</title>
<!--
	This format is designed to match the official WotC Statblock style 
	as defined in the 3.5 Edition DMG (II)

$Revision$
$Author$
$Date$

-->
<style type="text/css">
	body  { font-family:Arial, sans-serif; font-size:10pt; text-align:left; color:black; background:white; font-weight:normal; margin: 0px; padding: 5px; }
	.header { display:block; font-size:7pt; text-align:center; }
</style>
</head>
<body>

<table width="100%">
	<tr>
		<td><b><font size="+1">|TEXT.UPPER.NAME|</font></b></td>
		<td align="right">
			<b><font size="+1">CR 
|IIF(CR:0)|
&mdash;
|ELSE|
|CR|
|ENDIF|
			</font></b>
		</td>
	</tr>
</table>

|GENDER.LONG| |RACE| 
|FOR,%class,0,COUNT[CLASSES]-1,1,1|
|IIF(%class:0)|
|ELSE|
/
|ENDIF|
|CLASS.%class| |CLASS.%class.LEVEL|
|ENDFOR|
<br>

|ALIGNMENT.SHORT| |SIZELONG| 
|IIF(RACETYPE:None)|
|TEXT.LOWER.TYPE|
|ELSE|
|TEXT.LOWER.RACETYPE|
|ENDIF|
|IIF(VAR.IF(var("COUNT[RACESUBTYPES]")==0;1;0):1)|
|ELSE|
 (
|FOR,%subtype,0,COUNT[RACESUBTYPES]-2,1,1|
|TEXT.LOWER.RACESUBTYPE.%subtype|, 
|ENDFOR|
|FOR,%subtype,COUNT[RACESUBTYPES]-1,COUNT[RACESUBTYPES]-1,1,1|
|TEXT.LOWER.RACESUBTYPE.%subtype|
|ENDFOR|
)
|ENDIF|
<br>

<b>Init</b> |INITIATIVEMOD|; <b>Senses</b> 
|FOR,%VisionTest,STRLEN[VISION],STRLEN[VISION],1,0|
|IIF(%VisionTest:0)|
|ELSE|
|VISION|, 
|ENDIF|
|ENDFOR|
Listen |SKILL.Listen.TOTAL.SIGN|, Spot |SKILL.Spot.TOTAL.SIGN|<br>

<!-- TODO: Aura - needs to be defined by Ability objects -->

|FOR,%LanguageTest,STRLEN[LANGUAGES],STRLEN[LANGUAGES],1,0|
|IIF(%LanguageTest:0)|
|ELSE|
<b>Languages</b> |LANGUAGES|<br>
|ENDIF|
|ENDFOR|
<hr />

<b>AC</b> |AC.Total|, <b>touch</b> |AC.Touch|, <b>flat-footed</b> |AC.Flatfooted|; 

|FOR,%ACfeats,0,COUNT[FEATTYPE.ModifyAC.ALL]-1,1,1|
, |FEATALL.%ACfeats.TYPE=ModifyAC|
|ENDFOR|
<br>

|IIF(VAR.IF(var("UseAlternateDamage")==0;1;0):1)|
<b>hp</b> |HP| 
|ELSE|
<b>vp</b> |HP| <b>wp</b> |ALTHP| 
|ENDIF|
(|HITDICE.SHORT| HD)

|FOR,%DRTest,STRLEN[DR],STRLEN[DR],1,0|
|IIF(%DRTest:0)|
|ELSE|
<b>DR</b> |TEXT.LOWER.DR|
|ENDIF|
|ENDFOR|

<br>

<!-- TODO: Imunities need to be defined by Abilty Objects -->
<!-- TODO: Resitences need to be defined by Abilty Objects -->
|IIF(SR:0)|
|ELSE|
<b>SR</b> |SR|<br>
|ENDIF|

<b>Fort</b> |CHECK.FORTITUDE.TOTAL|, <b>Ref</b> |CHECK.REFLEX.TOTAL|, <b>Will</b> |CHECK.2.TOTAL|<br>

<!-- TODO: Weaknesses need to be defined by Abilty Objects -->

<hr />

<b>Speed</b>
|FOR,%movement,0,COUNT[MOVE]-1,1,1|
|IIF(MOVE.0.NAME:Walk)|
|IIF(MOVE.%movement.NAME:Walk)|
|MOVE.%movement.RATE| (|MOVE.%movement.SQUARES| squares)
|ELSE|
|MOVE.%movement.NAME| |MOVE.%movement.RATE|
|ENDIF|
|ELSE|
|MOVE.%movement.NAME| |MOVE.%movement.RATE| (|MOVE.%movement.SQUARES| squares)
|ENDIF|
 
|ENDFOR|

<!-- Attacks -->
|FOR,%weap,0,COUNT[EQTYPE.Weapon]-1,1,0|
<br>
|IIF(WEAPON.%weap.ISTYPE.Ranged)|
<b>Ranged </b>
|ELSE|
<b>Melee </b>
|ENDIF|
<i>|TEXT.LOWER.WEAPON.%weap.NAME.NOSTAR| </i>

|IIF(WEAPON.%weap.BASEHIT:INVALIDTEXT.TOHIT)|
(two handed) |WEAPON.%weap.THHIT| ((two handed) |WEAPON.%weap.THDAMAGE|
|FOR,%CritTest,STRLEN[WEAPON.%weap.CRIT],STRLEN[WEAPON.%weap.CRIT],1,0|
|IIF(%CritTest:2)|
|ELSE|
/|WEAPON.%weap.CRIT|
|ENDIF|
|ENDFOR|
|IIF(WEAPON.%weap.MULT:2)|
|ELSE|
/x|WEAPON.%weap.MULT|
|ENDIF|
)
|ELSE|
|WEAPON.%weap.BASEHIT| 
 
|IIF(WEAPON.%weap.ISTYPE.Ranged)|
(|WEAPON.%weap.RANGELIST.0.DAMAGE|
|ELSE|
(|WEAPON.%weap.DAMAGE|
|ENDIF|
|FOR,%CritTest,STRLEN[WEAPON.%weap.CRIT],STRLEN[WEAPON.%weap.CRIT],1,0|
|IIF(%CritTest:2)|
|ELSE|
/|WEAPON.%weap.CRIT|
|ENDIF|
|ENDFOR|
|IIF(WEAPON.%weap.MULT:2)|
|ELSE|
/x|WEAPON.%weap.MULT|
|ENDIF|
)
|ENDIF|
|ENDFOR|
<!-- End Attacks -->

<br><b>Face</b> |FACE| <b>Reach</b> |REACH|<br>
<b>Base Atk</b> |ATTACK.MELEE.BASE|; <b>Grp</b> 
|IIF(VAR.IF(var("CanNotGrapple")==0;1;0):1)|
|VAR.(STR+BAB+(SIZE-4)+(SIZE-4)+(SIZE-4)+(SIZE-4)+(ATTACK.GRAPPLE.MISC)).INTVAL.SIGN|
|ELSE|
 - 
|ENDIF|

|IIF(count("ABILITIES";"TYPE=AttackOption";"VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")>0)|
<br><b>Atk Options: </b> |FEATALLLIST.TYPE=AttackOption| |ABILITYALLLIST.Special Ability.TYPE=AttackOption|
|ENDIF|
|IIF(count("ABILITIES";"CATEGORY=Special Ability";"TYPE=SpecialAttack";"VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")>0)|
<br><b>Special Actions </b> |ABILITYALLLIST.Special Ability.VISIBLE.TYPE=SpecialAttack|
|ENDIF|

<!-- TODO: Combat Gear need to be defined by Equipment TYPE -->

<!-- Known Spells -->
|FOR,%class,COUNT[SPELLRACE],COUNT[SPELLRACE]+COUNT[CLASSES]-1,1,0|
|IIF(SPELLLISTMEMORIZE.%class:false)|
<br><b>Known |SPELLLISTCLASS.%class| Spells</b> (CL |MANUALWHITESPACE||SPELLLISTCLASS.%class.LEVEL||TEXT.NUMSUFFIX.SPELLLISTCLASS.%class.LEVEL||ENDMANUALWHITESPACE|): 
|FOR,%level,0,9,1,1|
|FOR,%spelllevelcount,COUNT[SPELLSINBOOK.%class.0.%level],COUNT[SPELLSINBOOK.%class.0.%level],1,0|
|IIF(%spelllevelcount:0)|
<!-- no memorized spells for SPELLSINBOOK.%class 0 %level -->
|ELSE|
|MANUALWHITESPACE||%level||TEXT.NUMSUFFIX.%level||ENDMANUALWHITESPACE| -
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.0.%level]-2,1,0|
<i>|TEXT.LOWER.SPELLMEM.%class.0.%level.%spell.NAME|</i>
|IIF(SPELLMEM.%class.0.%level.%spell.TIMES:1)|
|ELSE|
(|SPELLMEM.%class.0.%level.%spell.TIMES|)
|ENDIF|
|IIF(SPELLMEM.%class.0.%level.%spell.SAVEINFO:None)|
|ELSE|
(DC |SPELLMEM.%class.0.%level.%spell.DC|)
|ENDIF|
, 
|ENDFOR|
|FOR,%spell,COUNT[SPELLSINBOOK.%class.0.%level]-1,COUNT[SPELLSINBOOK.%class.0.%level]-1,1,0|
|SPELLMEM.%class.0.%level.%spell.BONUSSPELL|<i>|TEXT.LOWER.SPELLMEM.%class.0.%level.%spell.NAME|</i>
|IIF(SPELLMEM.%class.0.%level.%spell.TIMES:1)|
|ELSE|
(|SPELLMEM.%class.0.%level.%spell.TIMES|)
|ENDIF|
|IIF(SPELLMEM.%class.0.%level.%spell.SAVEINFO:None)|
|ELSE|
(DC |SPELLMEM.%class.0.%level.%spell.DC|)
|ENDIF|
|ENDFOR|
|ENDIF|
|ENDFOR|
|ENDFOR|
|ENDIF|
|ENDFOR|
<!-- End Known Spells -->

<!-- Prepared Spells -->
|FOR,%spellbook,2,COUNT[SPELLBOOKS]-1,1,0|

|IIF(SPELLBOOK.%spellbook.TYPE:Prepared Spell List)|
<br><b>|SPELLBOOKNAME.%spellbook| Prepared Spell List</b>
|FOR,%class,COUNT[SPELLRACE],COUNT[SPELLRACE]+COUNT[CLASSES]-1,1,0|
|IIF(SPELLLISTMEMORIZE.%class:true)|
<br>|SPELLLISTCLASS.%class| (CL |MANUALWHITESPACE||SPELLLISTCLASS.%class.LEVEL||TEXT.NUMSUFFIX.SPELLLISTCLASS.%class.LEVEL||ENDMANUALWHITESPACE|): 
|FOR,%level,0,9,1,1|
|FOR,%spelllevelcount,COUNT[SPELLSINBOOK.%class.%spellbook.%level],COUNT[SPELLSINBOOK.%class.%spellbook.%level],1,0|
|IIF(%spelllevelcount:0)|
<!-- no memorized spells for SPELLSINBOOK.%class %spellbook %level -->
|ELSE|
|MANUALWHITESPACE||%level||TEXT.NUMSUFFIX.%level||ENDMANUALWHITESPACE| -
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-2,1,0|
<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:1)|
|ELSE|
(|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|)
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
(DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|)
|ENDIF|
, 
|ENDFOR|
|FOR,%spell,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
|SPELLMEM.%class.%spellbook.%level.%spell.BONUSSPELL|<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:1)|
|ELSE|
(|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|)
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
(DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|)
|ENDIF|
|ENDFOR|
|ENDIF|
|ENDFOR|
|ENDFOR|
|ENDIF|
|ENDFOR|
|ELSE|
|ENDIF|
|ENDFOR|
<!-- End Prepared Spells -->

<!-- Domain list -->
|%DOMAIN.1|<p />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*: Domain spell. Deity: |DEITY|.
Domains: 
|FOR.1,COUNT[DOMAINS]+1,1,\DOMAIN.%\, ,NONE,1|
<br>
|%|
<!-- End Domain list -->

<!-- Innate Spell-Like Abilities -->
|IIF(VAR.IF(VAR("COUNT[SPELLSINBOOK.0.1.0]")>0;1;0):1)|
<br><b>Innate Spell-Like Abilities:</b>
|FOR,%spellbook,1,1,1,0|
|FOR,%class,0,0,1,0|
|FOR,%level,0,0,1,0|
|%SPELLLISTBOOK.%class.%level.%spellbook|
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i> (
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|, 
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:At Will)|
at will) 
|ELSE|
|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|/|SPELLMEM.%class.%spellbook.%level.%spell.TIMEUNIT|) 
|ENDIF|
|ENDFOR|
|%|
|ENDFOR|
|ENDFOR|
|ENDFOR|
|ENDIF|
<!-- End Innate Spell-Like Abilities -->

<!-- Other Spell-Like Abilities -->
|FOR,%spellbook,2,COUNT[SPELLBOOKS]-1,1,0|
|IIF(SPELLBOOK.%spellbook.TYPE:Innate Spell List)|
|IIF(VAR.IF(VAR("COUNT[SPELLSINBOOK.0.%spellbook.0]")>0;1;0):1)|
<br><b>|SPELLBOOK.%spellbook.NAME| Spell-Like Abilities:</b>
|FOR,%class,0,0,1,0|
|FOR,%level,0,0,1,0|
|%SPELLLISTBOOK.%class.%level.%spellbook|
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i> (
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|, 
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:At Will)|
at will) 
|ELSE|
|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|/|SPELLMEM.%class.%spellbook.%level.%spell.TIMEUNIT|) 
|ENDIF|
|ENDFOR|
|%|
|ENDFOR|
|ENDFOR|
|ENDIF|
|ENDIF|
|ENDFOR|
<!-- End Other Spell-Like Abilities -->

<hr />

<b>Abilities </b>
|FOR,%stat,0,COUNT[STATS]-2,1,1|
|TEXT.TITLECASE.STAT.%stat.NAME| |STAT.%stat|,
|ENDFOR|
|FOR,%stat,COUNT[STATS]-1,COUNT[STATS]-1,1,1|
|TEXT.TITLECASE.STAT.%stat.NAME| |STAT.%stat|
|ENDFOR|
<br>
|IIF(count("ABILITIES";"CATEGORY=Special Ability";"TYPE=SpecialQuality";"VISIBILITY=HIDDEN[or]VISIBILITY=DISPLAY_ONLY")>0)|
<b>Special Qualities </b> 
|FOR,%specialAbilities,0,count("ABILITIES","CATEGORY=Special Ability","TYPE=SpecialQuality","VISIBILITY=HIDDEN[or]VISIBILITY=DISPLAY_ONLY")-1,1,0| 
|ABILITYALL.Special Ability.VISIBLE.%specialAbilities.TYPE=SpecialQuality|, 
|ENDFOR|
<br>
|ENDIF|

|IIF(count("ABILITIES";"CATEGORY=Talent";"TYPE=Talent";"VISIBILITY=HIDDEN[or]VISIBILITY=DISPLAY_ONLY")>0)|
<b>Talents</b> 
|FOR,%talent,0,count("ABILITIES","CATEGORY=Talent","TYPE=Talent","VISIBILITY=HIDDEN[or]VISIBILITY=DISPLAY_ONLY")-1,1,0| 
|ABILITYALL.Talent.VISIBLE.%talent.TYPE=Talent|, 
|ENDFOR|
<br>
|ENDIF|


<b>Energy Points </b> |VAR.EnergyPoints.INTVAL|<br>

<b>Talents </b> |ABILITYALLLIST.Talent|<br>

<b>Feats </b> |FEATALLLIST|<br>

<b>Skills </b>
|FOR,%skill,0,${count("SKILLSIT", "VIEW=VISIBLE_EXPORT")-1},1,0|
|IIF(VAR.IF(var("SKILLSIT.%skill.TOTAL")==0;1;0):1)|
|ELSE|
|SKILLSIT.%skill| |SKILLSIT.%skill.TOTAL.INTVAL.SIGN|, 
|ENDIF|
|ENDFOR|
<br>

<b>Occupation </b> |ABILITYALL.Occupation.0.TYPE=Occupation|<br>

<b>Wealth </b> Current: |VAR.Wealth.INTVAL|, Starting: |VAR.WealthBonus.INTVAL|<br>

<b>Possessions </b>
|FOR,%equip,0,COUNT[EQUIPMENT.Not.Contained.NOT.Container]-1,1,1|
|IIF(EQ.NOT.CONTAINED.NOT.Container.%equip.QTY.INTVAL:1)|
<i>|TEXT.LOWER.EQ.NOT.CONTAINED.NOT.Container.%equip.NAME|; </i>
|ELSE|
<i>|TEXT.LOWER.EQ.NOT.CONTAINED.NOT.Container.%equip.NAME| (x|TEXT.LOWER.EQ.NOT.Contained.NOT.CONTAINER.%equip.QTY.INTVAL|); </i>
|ENDIF|
|ENDFOR|

|FOR,%container,0,COUNT[CONTAINERS]-1,1,1|
|EQ.IS.Container.%container.NAME|
|IIF(EQ.IS.Container.%container.CONTENTSNUM.QTY.INTVAL:0)|
|ELSE|
[
|ENDIF|
|FOR,%equip,0,EQ.IS.Container.%container.CONTENTSNUM-1,1,1|
|IIF(EQ.IS.Container.%container.CONTENTS.%equip.QTY.INTVAL:1)|
|EQ.IS.Container.%container.CONTENTS.%equip.NAME|;
|ELSE|
|EQ.IS.Container.%container.CONTENTS.%equip.NAME| (x|EQ.IS.Container.%container.CONTENTS.%equip.QTY.INTVAL|);
|ENDIF|
|ENDFOR|
|IIF(EQ.IS.Container.%container.CONTENTSNUM.QTY.INTVAL:0)|
;
|ELSE|
];
|ENDIF|
|ENDFOR|

<!-- SpellBooks -->
|FOR,%spellbook,2,COUNT[SPELLBOOKS]-1,1,0|
|IIF(SPELLBOOK.%spellbook.TYPE:Spell Book)|
<br><b>|SPELLBOOKNAME.%spellbook|</b>
|FOR,%class,COUNT[SPELLRACE],COUNT[SPELLRACE]+COUNT[CLASSES]-2,1,1|
|IIF(SPELLLISTMEMORIZE.%class:false)|
|ELSE|
|FOR,%level,0,9,1,1|
|FOR,%spelllevelcount,COUNT[SPELLSINBOOK.%class.%spellbook.%level],COUNT[SPELLSINBOOK.%class.%spellbook.%level],1,0|
|IIF(%spelllevelcount:0)|
<!-- no memorized spells for SPELLSINBOOK.%class %spellbook %level -->
|ELSE|
|MANUALWHITESPACE||%level||TEXT.NUMSUFFIX.%level||ENDMANUALWHITESPACE| -
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-2,1,0|
<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:1)|
|ELSE|
(|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|)
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
(DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|)
|ENDIF|
, 
|ENDFOR|
|FOR,%spell,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
|SPELLMEM.%class.%spellbook.%level.%spell.BONUSSPELL|<i>|TEXT.LOWER.SPELLMEM.%class.%spellbook.%level.%spell.NAME|</i>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:1)|
|ELSE|
(|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|)
|ENDIF|
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO:None)|
|ELSE|
(DC |SPELLMEM.%class.%spellbook.%level.%spell.DC|)
|ENDIF|
|ENDFOR|
|ENDIF|
|ENDFOR|
|ENDFOR|
|ENDIF|
|ENDFOR|
|ENDIF|
|ENDFOR|
<!-- End SpellBooks -->

<hr />
</body>
</html>